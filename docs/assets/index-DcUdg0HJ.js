(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function t(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=t(i);fetch(i.href,n)}})();const p=8,T=10;var a=(h=>(h[h.EMPTY=0]="EMPTY",h[h.BLOCK=1]="BLOCK",h[h.TRIANGLE_TL=2]="TRIANGLE_TL",h[h.TRIANGLE_TR=3]="TRIANGLE_TR",h[h.TRIANGLE_BR=4]="TRIANGLE_BR",h[h.TRIANGLE_BL=5]="TRIANGLE_BL",h[h.ABSORB=6]="ABSORB",h))(a||{});const b={TRAINING:"Training",NORMAL:"Normal",MITTEL:"Mittel",SCHWER:"Schwer"},L={GELB:"#f1c40f",ROT:"#e74c3c",BLAU:"#3498db",WEISS:"#ecf0f1",TRANSPARENT:"#95a5a6",LILA:"#9b59b6",HIMMELBLAU:"#5dade2",GRUEN:"#2ecc71",PINK:"#ff8a80",ORANGE:"#e67e22",ZITRONE:"#ffff8d",HELLLILA:"#ba68c8",SCHWARZ_GEM:"#2c3a47",SCHWARZ_MIX:"#34495e",HELLGRUEN:"#81c784",HELLORANGE:"#ffb74d",GRAU:"#9e9e9e",ABSORBIERT:"#17202a",correct:"#4caf50",INVALID_GEM:"#e74c3c"},_={BLAU:L.BLAU,GELB:L.GELB,ROT:L.ROT,WEISS:L.WEISS,"BLAU,ROT":L.LILA,"BLAU,WEISS":L.HIMMELBLAU,"BLAU,GELB":L.GRUEN,"ROT,WEISS":L.PINK,"GELB,ROT":L.ORANGE,"GELB,WEISS":L.ZITRONE,"BLAU,ROT,WEISS":L.HELLLILA,"BLAU,GELB,ROT":L.SCHWARZ_MIX,"BLAU,GELB,WEISS":L.HELLGRUEN,"GELB,ROT,WEISS":L.HELLORANGE,"BLAU,GELB,ROT,WEISS":L.GRAU},M={BLAU:"Blau",GELB:"Gelb",ROT:"Rot",WEISS:"Weiss","BLAU,ROT":"Lila","BLAU,WEISS":"Himmelblau","BLAU,GELB":"Grün","ROT,WEISS":"Hellrot","GELB,ROT":"Orange","GELB,WEISS":"Hellgelb","BLAU,ROT,WEISS":"Hell-Lila","BLAU,GELB,ROT":"Dunkelgrau","BLAU,GELB,WEISS":"Hellgrün","GELB,ROT,WEISS":"Hell-Orange","BLAU,GELB,ROT,WEISS":"Grau"},A={GELB:{name:"GELB",color:L.GELB,baseGems:["GELB"],gridPattern:[[a.TRIANGLE_BL,a.EMPTY],[a.BLOCK,a.TRIANGLE_BL]]},ROT:{name:"ROT",color:L.ROT,baseGems:["ROT"],gridPattern:[[a.TRIANGLE_BR,a.BLOCK,a.TRIANGLE_TL]]},BLAU:{name:"BLAU",color:L.BLAU,baseGems:["BLAU"],gridPattern:[[a.EMPTY,a.TRIANGLE_BR,a.TRIANGLE_BL,a.EMPTY],[a.TRIANGLE_BR,a.BLOCK,a.BLOCK,a.TRIANGLE_BL]]},WEISS_RAUTE:{name:"WEISS_RAUTE",color:L.WEISS,baseGems:["WEISS"],gridPattern:[[a.TRIANGLE_BR,a.TRIANGLE_BL],[a.TRIANGLE_TR,a.TRIANGLE_TL]]},WEISS_DREIECK:{name:"WEISS_DREIECK",color:L.WEISS,baseGems:["WEISS"],gridPattern:[[a.EMPTY,a.TRIANGLE_BR,a.TRIANGLE_BL,a.EMPTY],[a.TRIANGLE_BR,a.BLOCK,a.BLOCK,a.TRIANGLE_BL]]},TRANSPARENT:{name:"TRANSPARENT",color:L.TRANSPARENT,baseGems:[],gridPattern:[[a.TRIANGLE_BR,a.TRIANGLE_BL]]},SCHWARZ:{name:"SCHWARZ",color:L.SCHWARZ_GEM,baseGems:[],special:"absorbs",gridPattern:[[a.ABSORB,a.ABSORB]]}},W={[b.TRAINING]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK"],[b.NORMAL]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK"],[b.MITTEL]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK","TRANSPARENT"],[b.SCHWER]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK","TRANSPARENT","SCHWARZ"]};var R=(h=>(h[h.MAIN_MENU=0]="MAIN_MENU",h[h.DIFFICULTY_SELECT=1]="DIFFICULTY_SELECT",h[h.PLAYING=2]="PLAYING",h[h.GAME_OVER=3]="GAME_OVER",h))(R||{});const g={status:0,difficulty:null,secretGems:[],playerGems:[],log:[],waveCount:0,debugMode:!1};var y=(h=>(h[h.UP=0]="UP",h[h.RIGHT=1]="RIGHT",h[h.DOWN=2]="DOWN",h[h.LEFT=3]="LEFT",h))(y||{});const k={[a.BLOCK]:{0:2,1:3,2:0,3:1},[a.TRIANGLE_TR]:{0:3,1:2,2:0,3:1},[a.TRIANGLE_BL]:{0:2,1:3,2:1,3:0},[a.TRIANGLE_TL]:{0:1,1:3,2:0,3:2},[a.TRIANGLE_BR]:{0:2,1:0,2:3,3:1}},U={[a.EMPTY]:a.EMPTY,[a.BLOCK]:a.BLOCK,[a.ABSORB]:a.ABSORB,[a.TRIANGLE_TL]:a.TRIANGLE_TR,[a.TRIANGLE_TR]:a.TRIANGLE_BR,[a.TRIANGLE_BR]:a.TRIANGLE_BL,[a.TRIANGLE_BL]:a.TRIANGLE_TL};function D(h,e){var t;return h===a.EMPTY?null:((t=k[h])==null?void 0:t[e])??null}function N(h){const e=h.length,t=h[0].length,s=Array.from({length:t},()=>Array(e).fill(a.EMPTY));for(let i=0;i<e;i++)for(let n=0;n<t;n++)s[n][e-1-i]=U[h[i][n]];return s}const Y=100;function $(h){const e=parseInt(h.substring(1))-1;switch(h[0]){case"T":return{pos:{x:e,y:-1},dir:y.DOWN};case"B":return{pos:{x:e,y:T},dir:y.UP};case"L":return{pos:{x:-1,y:e},dir:y.RIGHT};case"R":return{pos:{x:p,y:e},dir:y.LEFT};default:return null}}function F(h){return h.y<0?`T${h.x+1}`:h.y>=T?`B${h.x+1}`:h.x<0?`L${h.y+1}`:h.x>=p?`R${h.y+1}`:"Error"}function K(h,e){switch(e){case y.UP:h.y--;break;case y.DOWN:h.y++;break;case y.LEFT:h.x--;break;case y.RIGHT:h.x++;break}}function V(h,e,t){const s=$(t);if(!s)return{exitId:"Error",colors:[],path:[],absorbed:!1};const i={...s.pos};let n=s.dir;const r=[],l=new Set,o=new Set;for(let c=0;c<Y;c++){if(K(i,n),r.length===0&&r.push({x:s.pos.x+(s.dir===y.RIGHT?1:s.dir===y.LEFT?0:.5),y:s.pos.y+(s.dir===y.DOWN?1:s.dir===y.UP?0:.5)}),i.x<0||i.x>=p||i.y<0||i.y>=T)return r.push({x:i.x+(n===y.LEFT?1:n===y.RIGHT?0:.5),y:i.y+(n===y.UP?1:n===y.DOWN?0:.5)}),{exitId:F(i),colors:[...l],path:r,absorbed:!1};const d=h[i.y][i.x];if(d===a.EMPTY)continue;r.push({x:i.x+.5,y:i.y+.5});const f=`${i.y},${i.x}`,u=e.get(f);if(u&&!o.has(u.id)){o.add(u.id);const I=A[u.name];I.baseGems&&I.baseGems.forEach(E=>l.add(E))}if(d===a.ABSORB)return{exitId:"Absorbed",colors:[],path:r,absorbed:!0};const m=D(d,n);m!==null&&(n=m)}return{exitId:"Loop?",colors:[...l],path:r,absorbed:!1}}const O={[a.EMPTY]:[!1,!1,!1,!1],[a.BLOCK]:[!0,!0,!0,!0],[a.ABSORB]:[!0,!0,!0,!0],[a.TRIANGLE_TL]:[!0,!1,!1,!0],[a.TRIANGLE_TR]:[!0,!0,!1,!1],[a.TRIANGLE_BR]:[!1,!0,!0,!1],[a.TRIANGLE_BL]:[!1,!1,!0,!0]};class X{constructor(e){this.secretGrid=[],this.secretGemMap=new Map,this.ui=e,this.ui.bindGame(this),this.showMainMenu()}_initSecretGrid(){this.secretGrid=Array.from({length:T},()=>Array(p).fill(a.EMPTY)),this.secretGemMap.clear()}showMainMenu(){g.status=R.MAIN_MENU,this.ui.showScreen("main")}showDifficultySelect(){g.status=R.DIFFICULTY_SELECT,this.ui.showScreen("difficulty")}showEndScreen(e){g.status=R.GAME_OVER,this.ui.showEndScreen(e,g.waveCount,g.secretGems,g.playerGems)}start(e){if(g.difficulty=e,g.status=R.PLAYING,this._initSecretGrid(),g.secretGems=this._placeSecretGems(),g.secretGems.length===0){this.showDifficultySelect();return}g.playerGems=[],g.log=[],g.waveCount=0,g.debugMode=!1,this.ui.setupGameUI(),this.ui.showScreen("game"),this.ui.redrawAll()}giveUp(){this.showEndScreen(!1)}toggleDebugMode(){g.debugMode=!g.debugMode,this.ui.redrawAll()}sendWave(e){if(g.status!==R.PLAYING)return;g.waveCount++;const t=V(this.secretGrid,this.secretGemMap,e),s={waveId:e,result:t,path:t.path};g.log.push(s),this.ui.addLogEntry(s,e)}checkSolution(){const e=Array.from({length:T},()=>Array(p).fill(a.EMPTY)),t=new Map;g.playerGems.forEach(i=>this._paintGemOnGrid(i,e,t));let s=!0;for(let i=0;i<T;i++){for(let n=0;n<p;n++)if(e[i][n]!==this.secretGrid[i][n]){s=!1;break}if(!s)break}this.showEndScreen(s)}addPlayerGem(e,t,s){if(g.playerGems.some(c=>c.name===e))return;const n=A[e];if(!n)return;const r={id:`player_${Date.now()}`,name:e,x:t,y:s,rotation:0,gridPattern:n.gridPattern,isValid:!1},l=r.gridPattern.length,o=r.gridPattern[0].length;r.x=Math.max(0,Math.min(t,p-o)),r.y=Math.max(0,Math.min(s,T-l)),g.playerGems.push(r),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.updateToolbar(),this.ui.redrawAll()}movePlayerGem(e,t,s){const i=g.playerGems.find(n=>n.id===e);if(i){const n=i.gridPattern.length,r=i.gridPattern[0].length;i.x=Math.max(0,Math.min(t,p-r)),i.y=Math.max(0,Math.min(s,T-n)),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.redrawAll()}}removePlayerGem(e){const t=g.playerGems.findIndex(s=>s.id===e);t>-1&&(g.playerGems.splice(t,1),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.updateToolbar(),this.ui.redrawAll())}rotatePlayerGem(e){const t=g.playerGems.find(s=>s.id===e);if(t){const s=t.gridPattern[0].length,i=t.gridPattern.length,n=t.x+s/2,r=t.y+i/2;t.rotation=(t.rotation+90)%360,t.gridPattern=N(t.gridPattern);const l=t.gridPattern[0].length,o=t.gridPattern.length;t.x=Math.round(n-l/2),t.y=Math.round(r-o/2),t.x=Math.max(0,Math.min(t.x,p-l)),t.y=Math.max(0,Math.min(t.y,T-o)),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.redrawAll()}}canPlaceGem(e){return this._isPlacementValid(e,g.playerGems)}_revalidateAllPlayerGems(){g.playerGems.forEach(e=>{e.isValid=this._isPlacementValid(e,g.playerGems)})}_doGemsCollide(e,t){const s=e.gridPattern[0].length,i=e.gridPattern.length,n=t.gridPattern[0].length,r=t.gridPattern.length;if(e.x+s<t.x||t.x+n<e.x||e.y+i<t.y||t.y+r<e.y)return!1;for(let l=0;l<i;l++)for(let o=0;o<s;o++){const c=e.gridPattern[l][o];if(c===a.EMPTY)continue;const d=e.x+o,f=e.y+l;for(let u=0;u<r;u++)for(let m=0;m<n;m++){const I=t.gridPattern[u][m];if(I===a.EMPTY)continue;const E=t.x+m,v=t.y+u;if(d===E&&f===v)return!0;if(Math.abs(d-E)+Math.abs(f-v)===1){const w=O[c],B=O[I];if(d<E){if(w[1]&&B[3])return!0}else if(d>E){if(w[3]&&B[1])return!0}else if(f<v){if(w[2]&&B[0])return!0}else if(f>v&&w[0]&&B[2])return!0}}}return!1}_isPlacementValid(e,t){const{gridPattern:s,x:i,y:n,id:r}=e,l=s.length,o=s[0].length;if(i<0||n<0||i+o>p||n+l>T)return!1;for(const c of t)if(!(r&&c.id===r)&&this._doGemsCollide(e,c))return!1;return!0}_paintGemOnGrid(e,t,s){const{gridPattern:i,x:n,y:r}=e;for(let l=0;l<i.length;l++)for(let o=0;o<i[l].length;o++){const c=i[l][o];c!==a.EMPTY&&t[r+l]&&t[r+l][n+o]!==void 0&&(t[r+l][n+o]=c,s==null||s.set(`${r+l},${n+o}`,e))}}updateSolutionButtonState(){var i;const e=((i=W[g.difficulty])==null?void 0:i.length)??0,t=g.playerGems.every(n=>n.isValid),s=g.playerGems.length===e;this.ui.checkSolutionBtn.disabled=!(t&&s)}_placeSecretGems(){const e=[],t=W[g.difficulty];let s=0;for(;e.length<t.length&&s<500;){s++,e.length=0;for(const i of t){const n=A[i];let r=!1,l=0;for(;!r&&l<200;){l++;let o=n.gridPattern;const c=Math.floor(Math.random()*4);for(let E=0;E<c;E++)o=N(o);const d=o.length,f=o[0].length;if(p<f||T<d)continue;const u=Math.floor(Math.random()*(p-f+1)),m=Math.floor(Math.random()*(T-d+1)),I={id:`secret_${i}_${e.length}`,name:i,x:u,y:m,rotation:c*90,gridPattern:o};this._isPlacementValid(I,e)&&(e.push(I),r=!0)}if(!r)break}}return e.length!==t.length?(console.error("Failed to place all secret gems!"),alert("Fehler bei der Level-Erstellung. Bitte versuchen Sie es erneut."),[]):(e.forEach(i=>this._paintGemOnGrid(i,this.secretGrid,this.secretGemMap)),console.log("Secret gems placed:",e),e)}}class P{constructor(e,t){this.state="normal",this.isUsed=!1,this.usedColor=null,this.cornerRadius=4,this.id=e,this.label=t,this.rect={x:0,y:0,width:0,height:0}}isInside(e,t){return e>=this.rect.x&&e<=this.rect.x+this.rect.width&&t>=this.rect.y&&t<=this.rect.y+this.rect.height}draw(e,t=!1){e.save();const s=this.isUsed&&this.usedColor?this.usedColor:"#4a627a";e.beginPath();const i=new Path2D;i.roundRect(this.rect.x,this.rect.y,this.rect.width,this.rect.height,this.cornerRadius),e.fillStyle=s,e.fill(i),t?(e.strokeStyle="#f1c40f",e.lineWidth=3,e.shadowColor="#f1c40f",e.shadowBlur=8,e.stroke(i),e.shadowColor="transparent",e.shadowBlur=0):this.state==="focused"&&(e.strokeStyle="#3498db",e.lineWidth=2,e.stroke(i));const r=(l=>{if(!l||l.length<7)return"#ecf0f1";try{const o=parseInt(l.slice(1,3),16),c=parseInt(l.slice(3,5),16),d=parseInt(l.slice(5,7),16);return o*.299+c*.587+d*.114>186?"#2c3e50":"#ecf0f1"}catch{return"#ecf0f1"}})(s);e.fillStyle=r,e.font=`bold ${this.rect.height*.45}px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif`,e.textAlign="center",e.textBaseline="middle",e.fillText(this.label,this.rect.x+this.rect.width/2,this.rect.y+this.rect.height/2),e.restore()}}class z{constructor(){this.screens={},this.emitters=[],this.focusedEmitterId=null,this.selectedWaveId=null,this.selectionContextEmitterId=null,this.dragStartInfo=null,this.isDragging=!1,this.draggedItemInfo=null,this.dragPos={x:0,y:0},this.lastValidDropTarget={x:-1,y:-1,isValid:!1},this.cellWidth=0,this.cellHeight=0,this.gap=1,this.cacheDOMElements(),this.bindGlobalEvents(),this._populateIntroRules()}bindGame(e){this.game=e}cacheDOMElements(){this.screens.main=document.getElementById("screen-main"),this.screens.difficulty=document.getElementById("screen-difficulty"),this.screens.game=document.getElementById("screen-game"),this.screens.end=document.getElementById("screen-end"),this.btnStartGame=document.getElementById("btn-start-game"),this.introRulesEl=document.getElementById("intro-rules"),this.difficultyOptions=document.getElementById("difficulty-options"),this.btnBackToMain1=document.getElementById("btn-back-to-main-1"),this.boardWrapper=document.getElementById("game-board-wrapper"),this.gemCanvas=document.getElementById("gem-canvas"),this.gemCtx=this.gemCanvas.getContext("2d"),this.pathOverlay=document.getElementById("path-overlay"),this.pathCtx=this.pathOverlay.getContext("2d"),this.gemToolbar=document.getElementById("gem-toolbar"),this.logList=document.getElementById("log-list"),this.actionsTabBtn=document.getElementById("actions-tab-btn"),this.logTabBtn=document.getElementById("log-tab-btn"),this.rulesTabBtn=document.getElementById("rules-tab-btn"),this.rulesPanel=document.getElementById("rules-panel"),this.checkSolutionBtn=document.getElementById("check-solution-btn"),this.giveUpBtn=document.getElementById("give-up-btn"),this.endTitle=document.getElementById("end-title"),this.endStats=document.getElementById("end-stats"),this.endSolutionCanvas=document.getElementById("end-solution-canvas"),this.endSolutionCtx=this.endSolutionCanvas.getContext("2d"),this.btnNewLevel=document.getElementById("btn-new-level"),this.btnMenu=document.getElementById("btn-menu")}bindGlobalEvents(){this.btnStartGame.addEventListener("click",()=>this.game.showDifficultySelect()),this.btnNewLevel.addEventListener("click",()=>{g.difficulty&&this.game.start(g.difficulty)}),this.btnMenu.addEventListener("click",()=>this.game.showMainMenu()),this.btnBackToMain1.addEventListener("click",()=>this.game.showMainMenu()),this.actionsTabBtn.addEventListener("click",()=>this.switchTab("actions")),this.logTabBtn.addEventListener("click",()=>this.switchTab("log")),this.rulesTabBtn.addEventListener("click",()=>this.switchTab("rules")),this.checkSolutionBtn.addEventListener("click",()=>this.game.checkSolution()),this.giveUpBtn.addEventListener("click",()=>this.game.giveUp()),this.gemCanvas.addEventListener("keydown",e=>this.handleCanvasKeyDown(e)),document.addEventListener("keydown",e=>{if(e.key==="n"&&(g.status===R.PLAYING||g.status===R.GAME_OVER)){g.difficulty&&this.game.start(g.difficulty);return}if(e.key==="Escape"&&(g.status===R.PLAYING||g.status===R.GAME_OVER)){this.game.showMainMenu();return}g.status===R.PLAYING&&e.key==="d"&&this.game.toggleDebugMode()}),document.addEventListener("click",e=>this.handleGlobalClick(e)),this.logList.addEventListener("click",e=>this.handleLogClick(e)),document.addEventListener("mousedown",e=>this.handlePointerDown(e)),document.addEventListener("touchstart",e=>this.handlePointerDown(e),{passive:!1}),document.addEventListener("mousemove",e=>this.handlePointerMove(e)),document.addEventListener("touchmove",e=>this.handlePointerMove(e),{passive:!1}),document.addEventListener("mouseup",e=>this.handlePointerUp(e)),document.addEventListener("touchend",e=>this.handlePointerUp(e)),this.logList.addEventListener("animationend",()=>{this.logList.classList.remove("flash")})}handleGlobalClick(e){if(!this.selectedWaveId)return;const t=e.target;t.closest("#gem-canvas")||t.closest("#log-list li")||(this.selectedWaveId=null,this.selectionContextEmitterId=null,this.redrawAll(),this.updateLogHighlight())}setupGameUI(){this._populateRulesPanel(),this.switchTab("actions"),this._createEmitterObjects(),this.updateToolbar(),this.logList.innerHTML="",this.selectedWaveId=null,this.selectionContextEmitterId=null,this.clearPath(),this.game.updateSolutionButtonState(),new ResizeObserver(()=>this.onBoardResize()).observe(this.boardWrapper),this.onBoardResize()}showScreen(e){e==="difficulty"&&this.populateDifficultyOptions(),Object.values(this.screens).forEach(t=>t.classList.add("hidden")),this.screens[e].classList.remove("hidden"),e==="game"&&this.gemCanvas.focus()}populateDifficultyOptions(){this.difficultyOptions.innerHTML="";const e={[b.TRAINING]:"Ideal zum Lernen des Spiels, mit dem Verlauf der Lichtstrahlen.",[b.NORMAL]:"Die Grundlagen. Lerne die farbigen und weissen Steine kennen.",[b.MITTEL]:"Eine neue Herausforderung. Ein transparenter Prisma-Stein lenkt das Licht ab, ohne es zu färben.",[b.SCHWER]:"Expertenmodus. Neben dem transparenten kommt ein schwarzer, Licht absorbierender Stein in Spiel."};Object.values(b).forEach(t=>{const s=document.createElement("button");s.innerHTML=`${t}<div class="difficulty-desc">${e[t]}</div>`,s.onclick=()=>this.game.start(t),this.difficultyOptions.appendChild(s)})}_createEmitterObjects(){this.emitters=[];for(let e=0;e<p;e++)this.emitters.push(new P(`T${e+1}`,`T${e+1}`));for(let e=0;e<p;e++)this.emitters.push(new P(`B${e+1}`,`B${e+1}`));for(let e=0;e<T;e++)this.emitters.push(new P(`L${e+1}`,`L${e+1}`));for(let e=0;e<T;e++)this.emitters.push(new P(`R${e+1}`,`R${e+1}`));this.emitters.length>0&&(this.focusedEmitterId=this.emitters[0].id)}onBoardResize(){const e=this.boardWrapper.getBoundingClientRect();if(e.width===0||e.height===0)return;const t=p+2,s=T+2;this.cellWidth=(e.width-(t-1)*this.gap)/t,this.cellHeight=(e.height-(s-1)*this.gap)/s;const i=window.devicePixelRatio||1;[this.pathOverlay,this.gemCanvas].forEach(n=>{n.width=e.width*i,n.height=e.height*i,n.style.width=`${e.width}px`,n.style.height=`${e.height}px`,n.getContext("2d").scale(i,i)}),this.emitters.forEach(n=>{const r=n.id,l=parseInt(r.substring(1))-1;let o=0,c=0;switch(r[0]){case"T":o=l+1,c=0;break;case"B":o=l+1,c=s-1;break;case"L":o=0,c=l+1;break;case"R":o=t-1,c=l+1;break}n.rect.x=o*(this.cellWidth+this.gap),n.rect.y=c*(this.cellHeight+this.gap),n.rect.width=this.cellWidth,n.rect.height=this.cellHeight}),this.redrawAll()}_getGemTooltip(e){var s;const t=A[e];if(!t)return"";switch(e){case"TRANSPARENT":return"Reflektiert nur, färbt nicht.";case"SCHWARZ":return"Absorbiert Licht.";default:if(t.baseGems&&t.baseGems.length>0){const i=t.baseGems[0];return`Fügt Farbe '${(s=M[i])==null?void 0:s.toLowerCase()}' hinzu.`}return`Edelstein ${e}`}}updateToolbar(){if(this.gemToolbar.innerHTML="",!g.difficulty)return;const e=new Set(g.playerGems.map(t=>t.name));W[g.difficulty].forEach(t=>{const s=A[t],i=document.createElement("div");i.className="toolbar-gem",e.has(t)&&i.classList.add("placed"),i.dataset.gemName=t,i.title=this._getGemTooltip(t);const n=document.createElement("canvas");n.className="toolbar-gem-canvas",i.appendChild(n),this.gemToolbar.appendChild(i),setTimeout(()=>this.drawToolbarGem(n,s),0)})}drawToolbarGem(e,t){const s=e.getContext("2d");if(!s)return;const i=window.devicePixelRatio||1,n=e.getBoundingClientRect();if(n.width===0||n.height===0)return;e.width=n.width*i,e.height=n.height*i,s.scale(i,i);const r=t.gridPattern,l=r.length,o=r[0].length,c=Math.max(o,l),d=n.width/c,f=n.height/c,u=(n.width-o*d)/2,m=(n.height-l*f)/2;for(let I=0;I<l;I++)for(let E=0;E<o;E++){const v=r[I][E];v!==a.EMPTY&&this.drawCellShape(s,E*d+u,I*f+m,d,f,v,t.color)}}redrawAll(){if(this.gemCanvas.width===0)return;const e=this.gemCtx;e.clearRect(0,0,this.gemCanvas.width,this.gemCanvas.height),this._drawBoardBackgroundAndGrid(e);const t=this.selectedWaveId?g.log.find(i=>i.waveId===this.selectedWaveId):null;this.emitters.forEach(i=>{let n=!1;t&&(n=i.id===t.waveId||i.id===t.result.exitId),i.draw(e,n)}),this.clearPath();const s=g.difficulty===b.TRAINING||g.debugMode;if(t&&s){const i=this.getPathColor(t.result);this.drawPath(t.path,i)}g.status===R.PLAYING&&(g.debugMode&&this.drawDebugSolution(e),this.drawPlayerGems(e),this._drawSelectedWaveTooltip(e),this.isDragging&&this.draggedItemInfo&&this.drawDragPreview(e))}drawDragPreview(e){if(!this.draggedItemInfo)return;const{gridPattern:t,name:s,id:i}=this.draggedItemInfo,n=A[s],r=t[0].length,l=t.length,o=this.dragPos.x/(this.cellWidth+this.gap)-1-r/2+.5,c=this.dragPos.y/(this.cellHeight+this.gap)-1-l/2+.5,d=Math.round(o),f=Math.round(c),u={id:i,x:d,y:f,gridPattern:t};this.lastValidDropTarget.isValid=this.game.canPlaceGem(u),this.lastValidDropTarget.x=d,this.lastValidDropTarget.y=f,e.save(),e.globalAlpha=.7;for(let m=0;m<l;m++)for(let I=0;I<r;I++)if(t[m][I]!==a.EMPTY){const E=this._gridToCanvasCoords(d+I,f+m);this.drawCellShape(e,E.x,E.y,this.cellWidth,this.cellHeight,t[m][I],n.color,!this.lastValidDropTarget.isValid)}e.restore()}drawPlayerGems(e){var t,s;for(const i of g.playerGems){if(this.isDragging&&((t=this.draggedItemInfo)==null?void 0:t.from)==="board"&&this.draggedItemInfo.id===i.id)continue;const{gridPattern:n,x:r,y:l,name:o}=i,c=A[o].color,d=!i.isValid;let f=!1;this.isDragging||(f=((s=this.getGemAtCanvasPos(this.dragPos.x,this.dragPos.y))==null?void 0:s.id)===i.id);for(let u=0;u<n.length;u++)for(let m=0;m<n[u].length;m++){const I=n[u][m];if(I!==a.EMPTY){const E=this._gridToCanvasCoords(r+m,l+u);this.drawCellShape(e,E.x,E.y,this.cellWidth,this.cellHeight,I,c,d,f)}}}}_drawBoardBackgroundAndGrid(e){e.save();const t=getComputedStyle(document.documentElement).getPropertyValue("--surface-color"),s=getComputedStyle(document.documentElement).getPropertyValue("--border-color");e.fillStyle=t,e.fillRect(0,0,e.canvas.width,e.canvas.height),e.fillStyle=s,e.fillRect(this.cellWidth+this.gap/2,this.cellHeight+this.gap/2,p*this.cellWidth+(p+1)*this.gap,T*this.cellHeight+(T+1)*this.gap),e.fillStyle=t,e.fillRect(this.cellWidth+this.gap,this.cellHeight+this.gap,p*this.cellWidth+(p-1)*this.gap,T*this.cellHeight+(T-1)*this.gap),e.strokeStyle=s,e.lineWidth=this.gap,e.beginPath();for(let i=1;i<p;i++){const n=(i+1)*(this.cellWidth+this.gap)-this.gap/2;e.moveTo(n,this.cellHeight+this.gap),e.lineTo(n,(T+1)*(this.cellHeight+this.gap))}for(let i=1;i<T;i++){const n=(i+1)*(this.cellHeight+this.gap)-this.gap/2;e.moveTo(this.cellWidth+this.gap,n),e.lineTo((p+1)*(this.cellWidth+this.gap),n)}e.stroke(),e.restore()}drawDebugSolution(e){if(!(!this.game.secretGrid||g.secretGems.length===0)){e.save(),e.globalAlpha=.2;for(const t of g.secretGems){const{gridPattern:s,x:i,y:n,name:r}=t,l=A[r].color;for(let o=0;o<s.length;o++)for(let c=0;c<s[o].length;c++){const d=s[o][c];if(d!==a.EMPTY){const f=this._gridToCanvasCoords(i,n);this.drawCellShape(e,f.x+c*this.cellWidth,f.y+o*this.cellHeight,this.cellWidth,this.cellHeight,d,l)}}}e.restore()}}drawCellShape(e,t,s,i,n,r,l,o=!1,c=!1){e.save(),l===L.TRANSPARENT?(e.fillStyle="rgba(164, 212, 228, 0.3)",e.strokeStyle="#a4d4e4",e.lineWidth=2):(e.fillStyle=l,e.strokeStyle="rgba(0,0,0,0.4)",e.lineWidth=1),o&&(e.fillStyle="rgba(231, 76, 60, 0.5)",e.strokeStyle=L.INVALID_GEM,e.lineWidth=2),c&&!o&&(e.shadowColor="white",e.shadowBlur=10),e.beginPath();const d=new Path2D;switch(r){case a.BLOCK:case a.ABSORB:d.rect(t,s,i,n);break;case a.TRIANGLE_TL:d.moveTo(t,s),d.lineTo(t+i,s),d.lineTo(t,s+n),d.closePath();break;case a.TRIANGLE_TR:d.moveTo(t,s),d.lineTo(t+i,s),d.lineTo(t+i,s+n),d.closePath();break;case a.TRIANGLE_BR:d.moveTo(t+i,s),d.lineTo(t+i,s+n),d.lineTo(t,s+n),d.closePath();break;case a.TRIANGLE_BL:d.moveTo(t,s),d.lineTo(t,s+n),d.lineTo(t+i,s+n),d.closePath();break}e.fill(d),e.stroke(d),e.restore()}_gridToCanvasCoords(e,t){return{x:(e+1)*(this.cellWidth+this.gap),y:(t+1)*(this.cellHeight+this.gap)}}_canvasToGridCoords(e,t){return{x:Math.floor(e/(this.cellWidth+this.gap))-1,y:Math.floor(t/(this.cellHeight+this.gap))-1}}getPathColor(e){if(e.absorbed)return L.ABSORBIERT;if(e.colors.length===0)return"rgba(236, 240, 241, 0.7)";const t=[...e.colors].sort().join(",");return _[t]||"#ccc"}drawPath(e,t){if(e.length<2)return;const s=this.pathCtx;this.clearPath(),s.strokeStyle=t,s.lineWidth=3,s.lineCap="round",s.lineJoin="round",s.shadowColor="rgba(0,0,0,0.5)",s.shadowBlur=5,s.beginPath();const i=this.cellWidth+this.gap,n=this.cellHeight+this.gap,r=this.cellWidth+this.gap,l=this.cellHeight+this.gap,o=d=>{const f=i+d.x*r,u=n+d.y*l;return{x:f,y:u}},c=o(e[0]);s.moveTo(c.x,c.y);for(let d=1;d<e.length;d++)s.lineTo(o(e[d]).x,o(e[d]).y);s.stroke()}clearPath(){this.pathCtx.clearRect(0,0,this.pathOverlay.width,this.pathOverlay.height)}switchTab(e){document.querySelectorAll(".tab-btn, .tab-panel").forEach(t=>t.classList.remove("active")),document.getElementById(`${e}-tab-btn`).classList.add("active"),document.getElementById(`${e}-panel`).classList.add("active")}addLogEntry(e,t){const s=document.createElement("li");s.dataset.waveId=t;const{result:i}=e,n=`${t} ➔ ${i.exitId}`,r=this.getPathColor(i),l=this._getPathColorName(i);s.innerHTML=`<span>${n}</span><div class="log-entry-result"><span class="log-color-name">${l}</span><div class="log-color-box" style="background-color: ${r};"></div></div>`,this.logList.prepend(s),this.switchTab("log"),this.selectedWaveId=t,this.selectionContextEmitterId=t,this.updateLogHighlight();const o=this.emitters.find(c=>c.id===t);if(o&&(o.isUsed=!0,o.usedColor=r),i.exitId&&i.exitId!=="Loop?"){const c=this.emitters.find(d=>d.id===i.exitId);c&&(c.isUsed=!0,c.usedColor=r)}this.redrawAll()}showEndScreen(e,t,s,i){this.endTitle.textContent=e?"Gewonnen!":"Verloren!",this.endStats.textContent=e?`Du hast die Mine in ${t} Abfragen gelöst!`:`Du hast ${t} Abfragen gebraucht.`,this.showScreen("end"),requestAnimationFrame(()=>{const n=e?[]:i;this.drawEndScreenSolution(this.endSolutionCtx,s,n)})}drawEndScreenSolution(e,t,s){const i=e.canvas,n=window.devicePixelRatio||1,r=i.getBoundingClientRect();if(r.width===0)return;i.width=r.width*n,i.height=r.height*n,e.scale(n,n),e.clearRect(0,0,r.width,r.height);const l=(r.width-(p-1)*1)/p,o=(r.height-(T-1)*1)/T;e.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--surface-color"),e.fillRect(0,0,r.width,r.height),this.drawGemSet(e,t,{cellW:l,cellH:o,gap:1,opacity:1,highlightInvalid:!1}),s.length>0&&this.drawGemSet(e,s,{cellW:l,cellH:o,gap:1,opacity:.55,highlightInvalid:!0})}drawGemSet(e,t,s){e.save(),e.globalAlpha=s.opacity;for(const i of t){const n=A[i.name].color,r=!!s.highlightInvalid&&!i.isValid;for(let l=0;l<i.gridPattern.length;l++)for(let o=0;o<i.gridPattern[l].length;o++){const c=i.gridPattern[l][o];if(c!==a.EMPTY){const d=i.x*(s.cellW+s.gap)+o*s.cellW,f=i.y*(s.cellH+s.gap)+l*s.cellH;this.drawCellShape(e,d,f,s.cellW,s.cellH,c,n,r)}}}e.restore()}handleLogClick(e){const t=e.target.closest("li");if(t&&t.dataset.waveId){const s=t.dataset.waveId;this.selectedWaveId===s?(this.selectedWaveId=null,this.selectionContextEmitterId=null):(this.selectedWaveId=s,this.selectionContextEmitterId=s),this.redrawAll(),this.updateLogHighlight()}}handleCanvasHover(e,t){if(this.isDragging)return;const s=this.gemCanvas.getBoundingClientRect(),i=e-s.left,n=t-s.top;this.dragPos={x:i,y:n},this.redrawAll()}handleCanvasMouseLeave(){this.dragPos={x:-1,y:-1},this.redrawAll()}updateLogHighlight(){this.logList.querySelectorAll("li").forEach(e=>{const t=e;t.dataset.waveId===this.selectedWaveId?(t.classList.add("selected"),t.scrollIntoView({behavior:"smooth",block:"nearest"})):t.classList.remove("selected")})}handleCanvasKeyDown(e){if(!["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Enter"," "].includes(e.key))return;e.preventDefault();const t=this.emitters.find(n=>n.id===this.focusedEmitterId);if(t&&(t.state="normal"),e.key==="Enter"||e.key===" "){if(this.focusedEmitterId){const n=this.emitters.find(r=>r.id===this.focusedEmitterId);if(n&&!n.isUsed)this.game.sendWave(this.focusedEmitterId);else if(n!=null&&n.isUsed){const r=g.log.find(l=>l.waveId===n.id||l.result.exitId===n.id);r&&(this.selectedWaveId===r.waveId&&this.selectionContextEmitterId===n.id?(this.selectedWaveId=null,this.selectionContextEmitterId=null):(this.selectedWaveId=r.waveId,this.selectionContextEmitterId=n.id))}}t&&(t.state="focused"),this.redrawAll(),this.updateLogHighlight();return}const s=this.emitters.findIndex(n=>n.id===this.focusedEmitterId);if(s===-1)return;let i=-1;switch(e.key){case"ArrowRight":i=(s+1)%this.emitters.length;break;case"ArrowLeft":i=(s-1+this.emitters.length)%this.emitters.length;break;case"ArrowUp":i=(s-1+this.emitters.length)%this.emitters.length;break;case"ArrowDown":i=(s+1)%this.emitters.length;break}if(i!==-1){this.focusedEmitterId=this.emitters[i].id;const n=this.emitters[i];n&&(n.state="focused"),this.redrawAll()}}getPointerCoordinates(e){return e instanceof MouseEvent?{clientX:e.clientX,clientY:e.clientY}:e.changedTouches&&e.changedTouches.length>0?{clientX:e.changedTouches[0].clientX,clientY:e.changedTouches[0].clientY}:null}handlePointerDown(e){if(e instanceof MouseEvent&&e.button!==0)return;const t=this.getPointerCoordinates(e);if(!t)return;const{clientX:s,clientY:i}=t,n=e.target,r=n.closest(".toolbar-gem:not(.placed)"),l=n.closest("#gem-canvas");e instanceof TouchEvent&&(l||r)&&e.preventDefault();let o=null,c=0,d=0;if(r){const f=r.getBoundingClientRect();c=s-f.left,d=i-f.top;const u=r.dataset.gemName;o={name:u,from:"toolbar",gridPattern:A[u].gridPattern,element:r,offsetX:c,offsetY:d}}else if(l){const f=this.gemCanvas.getBoundingClientRect(),u=s-f.left,m=i-f.top,I=this.getGemAtCanvasPos(u,m);if(I){const E=this._canvasToGridCoords(u,m);o={id:I.id,name:I.name,from:"board",gridPattern:I.gridPattern,offsetX:(E.x-I.x)*this.cellWidth,offsetY:(E.y-I.y)*this.cellHeight}}}o&&(this.dragStartInfo={item:o,startX:s,startY:i})}handlePointerMove(e){const t=this.getPointerCoordinates(e);if(!t)return;const{clientX:s,clientY:i}=t;if(this.dragStartInfo){if(e instanceof TouchEvent&&e.preventDefault(),!this.isDragging){const n=s-this.dragStartInfo.startX,r=i-this.dragStartInfo.startY;Math.sqrt(n*n+r*r)>5&&(this.isDragging=!0,this.draggedItemInfo=this.dragStartInfo.item,this.draggedItemInfo.element&&this.draggedItemInfo.element.classList.add("dragging"))}if(this.isDragging){const n=this.gemCanvas.getBoundingClientRect();this.dragPos={x:s-n.left,y:i-n.top},this.redrawAll()}}else e.target===this.gemCanvas?this.handleCanvasHover(s,i):this.handleCanvasMouseLeave()}handlePointerUp(e){var r;const t=this.getPointerCoordinates(e);if(!t)return;const{clientX:s,clientY:i}=t;if(this.isDragging&&this.draggedItemInfo){const l=this.gemCanvas.getBoundingClientRect();if(s>=l.left&&s<=l.right&&i>=l.top&&i<=l.bottom){if(this.lastValidDropTarget.isValid){const{x:c,y:d}=this.lastValidDropTarget;this.draggedItemInfo.from==="toolbar"?this.game.addPlayerGem(this.draggedItemInfo.name,c,d):this.draggedItemInfo.id&&this.game.movePlayerGem(this.draggedItemInfo.id,c,d)}}else this.draggedItemInfo.from==="board"&&this.draggedItemInfo.id&&this.game.removePlayerGem(this.draggedItemInfo.id)}else if(e.target.closest("#gem-canvas")){const o=this.gemCanvas.getBoundingClientRect(),c=s-o.left,d=i-o.top,f=this.emitters.find(u=>u.isInside(c,d));if(f){if(!f.isUsed)this.game.sendWave(f.id);else{const u=g.log.find(m=>m.waveId===f.id||m.result.exitId===f.id);u?this.selectedWaveId===u.waveId&&this.selectionContextEmitterId===f.id?(this.selectedWaveId=null,this.selectionContextEmitterId=null):(this.selectedWaveId=u.waveId,this.selectionContextEmitterId=f.id):(this.selectedWaveId=null,this.selectionContextEmitterId=null)}this.updateLogHighlight()}else{const u=this.getGemAtCanvasPos(c,d);u?(this.selectedWaveId=null,this.selectionContextEmitterId=null,this.game.rotatePlayerGem(u.id),this.updateLogHighlight()):(this.selectedWaveId=null,this.selectionContextEmitterId=null,this.updateLogHighlight())}}(r=this.dragStartInfo)!=null&&r.item.element&&this.dragStartInfo.item.element.classList.remove("dragging"),this.dragStartInfo=null,this.isDragging=!1,this.draggedItemInfo=null,this.redrawAll(),this.updateToolbar()}getGemAtCanvasPos(e,t){if(e<0||t<0)return null;const{x:s,y:i}=this._canvasToGridCoords(e,t);for(let n=g.playerGems.length-1;n>=0;n--){const r=g.playerGems[n],l=r.gridPattern.length,o=r.gridPattern[0].length;if(s>=r.x&&s<r.x+o&&i>=r.y&&i<r.y+l&&r.gridPattern[i-r.y][s-r.x]!==a.EMPTY)return r}return null}_getPathColorName(e){if(e.absorbed)return"Absorbiert";if(e.colors.length===0)return"Keine Farbe";const t=[...e.colors].sort().join(",");return M[t]||"Unbekannte Mischung"}_createColorMixEntry(e){const t=_[e],s=e.split(","),i=document.createElement("div");i.className="color-mix-entry";let n="";s.forEach((l,o)=>{const c=L[l];n+=`<div class="color-mix-box" style="background-color: ${c}"></div>`,o<s.length-1&&(n+="<span>+</span>")});const r=M[e]||"Mischung";return n+=`<span>=</span> <div class="color-mix-box" style="background-color: ${t}"></div> <span>${r}</span>`,i.innerHTML=n,i}_populateColorMixColumns(e){if(!e)return;const t=document.createElement("div");t.className="color-mix-column";const s=document.createElement("div");s.className="color-mix-column";const i=["BLAU,ROT","BLAU,GELB","GELB,ROT","BLAU,ROT,WEISS","BLAU,GELB,WEISS","BLAU,GELB,ROT,WEISS"],n=["BLAU,WEISS","ROT,WEISS","GELB,WEISS","BLAU,GELB,ROT","GELB,ROT,WEISS"];i.forEach(r=>t.appendChild(this._createColorMixEntry(r))),n.forEach(r=>s.appendChild(this._createColorMixEntry(r))),e.appendChild(t),e.appendChild(s)}_populateIntroRules(){this.introRulesEl.innerHTML=`
            <h3>Spielanleitung</h3>
            <p><strong>Ziel:</strong> Finde die Position und Ausrichtung der versteckten Edelsteine.</p>
            <ul>
                <li>Sende Lichtwellen von den Rändern in das Spielfeld.</li>
                <li>Die austretende Farbe und Position verraten, welche Steine getroffen wurden.</li>
                <li>Ziehe Edelsteine aus der Werkzeugleiste auf das Feld. Du kannst sie verschieben und drehen.</li>
                <li>Ein Klick auf einen platzierten Stein dreht ihn um 90°.</li>
                <li>Steine dürfen sich nicht überlappen oder Kante an Kante liegen.</li>
                <li>Drücke <strong>'n'</strong> für ein neues Level oder <strong>'esc'</strong> um zum Menü zurückzukehren.</li>
            </ul>
            <h4>Farbmischung</h4>
            <p>Wenn ein Lichtstrahl mehrere farbige Steine durchquert, mischen sich ihre Farben:</p>
            <div class="color-mix-container"></div>
        `;const e=this.introRulesEl.querySelector(".color-mix-container");this._populateColorMixColumns(e)}_populateRulesPanel(){this.rulesPanel.innerHTML=`
            <h4>Grundregeln</h4>
            <ul>
                <li><strong>Ziel:</strong> Finde die Position und Ausrichtung der versteckten Edelsteine.</li>
                <li>Sende Lichtwellen, um zu sehen, wo sie austreten und welche Farbe sie haben.</li>
                <li>Ziehe die Edelsteine auf das Feld, um die Lösung nachzubauen.</li>
                <li>Klicke auf einen platzierten Stein, um ihn zu <strong>drehen</strong>.</li>
                <li>Steine dürfen sich nicht überlappen oder Kante an Kante liegen.</li>
            </ul>
            <h4>Farbmischung</h4>
            <p>Wenn ein Lichtstrahl mehrere farbige Steine durchquert, mischen sich ihre Farben:</p>
            <div class="color-mix-container"></div>
        `;const e=this.rulesPanel.querySelector(".color-mix-container");this._populateColorMixColumns(e)}_drawSelectedWaveTooltip(e){if(!this.selectedWaveId)return;const t=g.log.find(C=>C.waveId===this.selectedWaveId);if(!t)return;const s=this.selectionContextEmitterId||t.waveId,i=this.emitters.find(C=>C.id===s);if(!i)return;const n=t.waveId,r=t.result.exitId,l=this._getPathColorName(t.result),o=s===n?`${n} ➔ ${l} ➔ ${r}`:`${r} ➔ ${l} ➔ ${n}`;e.save();const c=this.cellHeight*.35;e.font=`bold ${c}px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif`,e.textBaseline="middle";const d=e.measureText(o),f={x:8,y:5},u=d.width+f.x*2,m=c+f.y*2,I=6,E=i.rect,v=5,w=this.gemCanvas.width/(window.devicePixelRatio||1),B=this.gemCanvas.height/(window.devicePixelRatio||1);let S=0,G=0;G=E.y+E.height+v,S=E.x+E.width/2-u/2,G+m>B&&(G=E.y-m-v,G<0&&(S=E.x+E.width+v,G=E.y+E.height/2-m/2,S+u>w&&(S=E.x-u-v))),S<0&&(S=0),S+u>w&&(S=w-u),G<0&&(G=0),G+m>B&&(G=B-m);const H=S+u/2,x=G+m/2;e.fillStyle="black",e.beginPath(),e.roundRect(S,G,u,m,I),e.fill(),e.fillStyle="white",e.textAlign="center",e.fillText(o,H,x),e.restore()}}document.addEventListener("DOMContentLoaded",()=>{const h=new z,e=new X(h);window.game=e});
