(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function e(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(i){if(i.ep)return;i.ep=!0;const r=e(i);fetch(i.href,r)}})();const p=8,L=10;var l=(d=>(d[d.EMPTY=0]="EMPTY",d[d.BLOCK=1]="BLOCK",d[d.TRIANGLE_TL=2]="TRIANGLE_TL",d[d.TRIANGLE_TR=3]="TRIANGLE_TR",d[d.TRIANGLE_BR=4]="TRIANGLE_BR",d[d.TRIANGLE_BL=5]="TRIANGLE_BL",d[d.ABSORB=6]="ABSORB",d))(l||{});const v={NORMAL:"Normal",MITTEL:"Mittel",SCHWER:"Schwer"},E={GELB:"#f1c40f",ROT:"#e74c3c",BLAU:"#3498db",WEISS:"#ecf0f1",TRANSPARENT:"#95a5a6",LILA:"#9b59b6",HIMMELBLAU:"#5dade2",GRUEN:"#2ecc71",PINK:"#f06292",ORANGE:"#e67e22",ZITRONE:"#d4e157",HELLLILA:"#ba68c8",SCHWARZ_GEM:"#2c3a47",SCHWARZ_MIX:"#34495e",HELLGRUEN:"#81c784",HELLORANGE:"#ffb74d",GRAU:"#9e9e9e",ABSORBIERT:"#17202a",INVALID_GEM:"#e74c3c"},_={BLAU:E.BLAU,GELB:E.GELB,ROT:E.ROT,WEISS:E.WEISS,"BLAU,ROT":E.LILA,"BLAU,WEISS":E.HIMMELBLAU,"BLAU,GELB":E.GRUEN,"ROT,WEISS":E.PINK,"GELB,ROT":E.ORANGE,"GELB,WEISS":E.ZITRONE,"BLAU,ROT,WEISS":E.HELLLILA,"BLAU,GELB,ROT":E.SCHWARZ_MIX,"BLAU,GELB,WEISS":E.HELLGRUEN,"GELB,ROT,WEISS":E.HELLORANGE,"BLAU,GELB,ROT,WEISS":E.GRAU},P={BLAU:"Blau",GELB:"Gelb",ROT:"Rot",WEISS:"Weiss","BLAU,ROT":"Lila","BLAU,WEISS":"Himmelblau","BLAU,GELB":"Grün","ROT,WEISS":"Hellrot","GELB,ROT":"Orange","GELB,WEISS":"Hellgelb","BLAU,ROT,WEISS":"Hell-Lila","BLAU,GELB,ROT":"Dunkelgrau","BLAU,GELB,WEISS":"Hellgrün","GELB,ROT,WEISS":"Hell-Orange","BLAU,GELB,ROT,WEISS":"Grau"},G={GELB:{name:"GELB",color:E.GELB,baseGems:["GELB"],gridPattern:[[l.TRIANGLE_BL,l.EMPTY],[l.BLOCK,l.TRIANGLE_BL]]},ROT:{name:"ROT",color:E.ROT,baseGems:["ROT"],gridPattern:[[l.TRIANGLE_BR,l.BLOCK,l.TRIANGLE_TL]]},BLAU:{name:"BLAU",color:E.BLAU,baseGems:["BLAU"],gridPattern:[[l.EMPTY,l.TRIANGLE_BR,l.TRIANGLE_BL,l.EMPTY],[l.TRIANGLE_BR,l.BLOCK,l.BLOCK,l.TRIANGLE_BL]]},WEISS_RAUTE:{name:"WEISS_RAUTE",color:E.WEISS,baseGems:["WEISS"],gridPattern:[[l.TRIANGLE_BR,l.TRIANGLE_BL],[l.TRIANGLE_TR,l.TRIANGLE_TL]]},WEISS_DREIECK:{name:"WEISS_DREIECK",color:E.WEISS,baseGems:["WEISS"],gridPattern:[[l.EMPTY,l.TRIANGLE_BR,l.TRIANGLE_BL,l.EMPTY],[l.TRIANGLE_BR,l.BLOCK,l.BLOCK,l.TRIANGLE_BL]]},TRANSPARENT:{name:"TRANSPARENT",color:E.TRANSPARENT,baseGems:[],gridPattern:[[l.TRIANGLE_BR,l.TRIANGLE_BL]]},SCHWARZ:{name:"SCHWARZ",color:E.SCHWARZ_GEM,baseGems:[],special:"absorbs",gridPattern:[[l.ABSORB,l.ABSORB]]}},B={[v.NORMAL]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK"],[v.MITTEL]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK","TRANSPARENT"],[v.SCHWER]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK","TRANSPARENT","SCHWARZ"]};var R=(d=>(d[d.MAIN_MENU=0]="MAIN_MENU",d[d.DIFFICULTY_SELECT=1]="DIFFICULTY_SELECT",d[d.PLAYING=2]="PLAYING",d[d.GAME_OVER=3]="GAME_OVER",d))(R||{});const g={status:0,difficulty:null,secretGems:[],playerGems:[],log:[],waveCount:0,debugMode:!1};var y=(d=>(d[d.UP=0]="UP",d[d.RIGHT=1]="RIGHT",d[d.DOWN=2]="DOWN",d[d.LEFT=3]="LEFT",d))(y||{});const N={[l.BLOCK]:{0:2,1:3,2:0,3:1},[l.TRIANGLE_TR]:{0:3,1:2,2:0,3:1},[l.TRIANGLE_BL]:{0:2,1:3,2:1,3:0},[l.TRIANGLE_TL]:{0:1,1:3,2:0,3:2},[l.TRIANGLE_BR]:{0:2,1:0,2:3,3:1}},O={[l.EMPTY]:l.EMPTY,[l.BLOCK]:l.BLOCK,[l.ABSORB]:l.ABSORB,[l.TRIANGLE_TL]:l.TRIANGLE_TR,[l.TRIANGLE_TR]:l.TRIANGLE_BR,[l.TRIANGLE_BR]:l.TRIANGLE_BL,[l.TRIANGLE_BL]:l.TRIANGLE_TL};function H(d,t){var e;return d===l.EMPTY?null:((e=N[d])==null?void 0:e[t])??null}function C(d){const t=d.length,e=d[0].length,s=Array.from({length:e},()=>Array(t).fill(l.EMPTY));for(let i=0;i<t;i++)for(let r=0;r<e;r++)s[r][t-1-i]=O[d[i][r]];return s}const W=100;function D(d){const t=parseInt(d.substring(1))-1;switch(d[0]){case"T":return{pos:{x:t,y:-1},dir:y.DOWN};case"B":return{pos:{x:t,y:L},dir:y.UP};case"L":return{pos:{x:-1,y:t},dir:y.RIGHT};case"R":return{pos:{x:p,y:t},dir:y.LEFT};default:return null}}function k(d){return d.y<0?`T${d.x+1}`:d.y>=L?`B${d.x+1}`:d.x<0?`L${d.y+1}`:d.x>=p?`R${d.y+1}`:"Error"}function U(d,t){switch(t){case y.UP:d.y--;break;case y.DOWN:d.y++;break;case y.LEFT:d.x--;break;case y.RIGHT:d.x++;break}}function Y(d,t,e){const s=D(e);if(!s)return{exitId:"Error",colors:[],path:[],absorbed:!1};const i={...s.pos};let r=s.dir;const n=[],a=new Set,o=new Set;for(let c=0;c<W;c++){if(U(i,r),n.length===0&&n.push({x:s.pos.x+(s.dir===y.RIGHT?1:s.dir===y.LEFT?0:.5),y:s.pos.y+(s.dir===y.DOWN?1:s.dir===y.UP?0:.5)}),i.x<0||i.x>=p||i.y<0||i.y>=L)return n.push({x:i.x+(r===y.LEFT?1:r===y.RIGHT?0:.5),y:i.y+(r===y.UP?1:r===y.DOWN?0:.5)}),{exitId:k(i),colors:[...a],path:n,absorbed:!1};const h=d[i.y][i.x];if(h===l.EMPTY)continue;n.push({x:i.x+.5,y:i.y+.5});const u=`${i.y},${i.x}`,f=t.get(u);if(f&&!o.has(f.id)){o.add(f.id);const T=G[f.name];T.baseGems&&T.baseGems.forEach(I=>a.add(I))}if(h===l.ABSORB)return{exitId:"Absorbed",colors:[],path:n,absorbed:!0};const m=H(h,r);m!==null&&(r=m)}return{exitId:"Loop?",colors:[...a],path:n,absorbed:!1}}const M={[l.EMPTY]:[!1,!1,!1,!1],[l.BLOCK]:[!0,!0,!0,!0],[l.ABSORB]:[!0,!0,!0,!0],[l.TRIANGLE_TL]:[!0,!1,!1,!0],[l.TRIANGLE_TR]:[!0,!0,!1,!1],[l.TRIANGLE_BR]:[!1,!0,!0,!1],[l.TRIANGLE_BL]:[!1,!1,!0,!0]};class x{constructor(t){this.secretGrid=[],this.secretGemMap=new Map,this.ui=t,this.ui.bindGame(this),this.showMainMenu()}_initSecretGrid(){this.secretGrid=Array.from({length:L},()=>Array(p).fill(l.EMPTY)),this.secretGemMap.clear()}showMainMenu(){g.status=R.MAIN_MENU,this.ui.showScreen("main")}showDifficultySelect(){g.status=R.DIFFICULTY_SELECT,this.ui.showScreen("difficulty")}showEndScreen(t){g.status=R.GAME_OVER,this.ui.showEndScreen(t,g.waveCount,g.secretGems,g.playerGems)}start(t){if(g.difficulty=t,g.status=R.PLAYING,this._initSecretGrid(),g.secretGems=this._placeSecretGems(),g.secretGems.length===0){this.showDifficultySelect();return}g.playerGems=[],g.log=[],g.waveCount=0,g.debugMode=!1,this.ui.setupGameUI(),this.ui.showScreen("game"),this.ui.redrawAll()}giveUp(){this.showEndScreen(!1)}toggleDebugMode(){g.debugMode=!g.debugMode,this.ui.redrawAll()}sendWave(t){if(g.status!==R.PLAYING)return;g.waveCount++;const e=Y(this.secretGrid,this.secretGemMap,t),s={waveId:t,result:e,path:e.path};g.log.push(s),this.ui.addLogEntry(s,t),this.ui.showWavePath(e)}checkSolution(){const t=Array.from({length:L},()=>Array(p).fill(l.EMPTY)),e=new Map;g.playerGems.forEach(i=>this._paintGemOnGrid(i,t,e));let s=!0;for(let i=0;i<L;i++){for(let r=0;r<p;r++)if(t[i][r]!==this.secretGrid[i][r]){s=!1;break}if(!s)break}this.showEndScreen(s)}addPlayerGem(t,e,s){if(g.playerGems.some(c=>c.name===t))return;const r=G[t];if(!r)return;const n={id:`player_${Date.now()}`,name:t,x:e,y:s,rotation:0,gridPattern:r.gridPattern,isValid:!1},a=n.gridPattern.length,o=n.gridPattern[0].length;n.x=Math.max(0,Math.min(e,p-o)),n.y=Math.max(0,Math.min(s,L-a)),g.playerGems.push(n),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.updateToolbar(),this.ui.redrawAll()}movePlayerGem(t,e,s){const i=g.playerGems.find(r=>r.id===t);if(i){const r=i.gridPattern.length,n=i.gridPattern[0].length;i.x=Math.max(0,Math.min(e,p-n)),i.y=Math.max(0,Math.min(s,L-r)),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.redrawAll()}}removePlayerGem(t){const e=g.playerGems.findIndex(s=>s.id===t);e>-1&&(g.playerGems.splice(e,1),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.updateToolbar(),this.ui.redrawAll())}rotatePlayerGem(t){const e=g.playerGems.find(s=>s.id===t);if(e){const s=e.gridPattern[0].length,i=e.gridPattern.length,r=e.x+s/2,n=e.y+i/2;e.rotation=(e.rotation+90)%360,e.gridPattern=C(e.gridPattern);const a=e.gridPattern[0].length,o=e.gridPattern.length;e.x=Math.round(r-a/2),e.y=Math.round(n-o/2),e.x=Math.max(0,Math.min(e.x,p-a)),e.y=Math.max(0,Math.min(e.y,L-o)),this._revalidateAllPlayerGems(),this.updateSolutionButtonState(),this.ui.redrawAll()}}canPlaceGem(t){return this._isPlacementValid(t,g.playerGems)}_revalidateAllPlayerGems(){g.playerGems.forEach(t=>{t.isValid=this._isPlacementValid(t,g.playerGems)})}_doGemsCollide(t,e){const s=t.gridPattern[0].length,i=t.gridPattern.length,r=e.gridPattern[0].length,n=e.gridPattern.length;if(t.x+s<e.x||e.x+r<t.x||t.y+i<e.y||e.y+n<t.y)return!1;for(let a=0;a<i;a++)for(let o=0;o<s;o++){const c=t.gridPattern[a][o];if(c===l.EMPTY)continue;const h=t.x+o,u=t.y+a;for(let f=0;f<n;f++)for(let m=0;m<r;m++){const T=e.gridPattern[f][m];if(T===l.EMPTY)continue;const I=e.x+m,A=e.y+f;if(h===I&&u===A)return!0;if(Math.abs(h-I)+Math.abs(u-A)===1){const w=M[c],S=M[T];if(h<I){if(w[1]&&S[3])return!0}else if(h>I){if(w[3]&&S[1])return!0}else if(u<A){if(w[2]&&S[0])return!0}else if(u>A&&w[0]&&S[2])return!0}}}return!1}_isPlacementValid(t,e){const{gridPattern:s,x:i,y:r,id:n}=t,a=s.length,o=s[0].length;if(i<0||r<0||i+o>p||r+a>L)return!1;for(const c of e)if(!(n&&c.id===n)&&this._doGemsCollide(t,c))return!1;return!0}_paintGemOnGrid(t,e,s){const{gridPattern:i,x:r,y:n}=t;for(let a=0;a<i.length;a++)for(let o=0;o<i[a].length;o++){const c=i[a][o];c!==l.EMPTY&&e[n+a]&&e[n+a][r+o]!==void 0&&(e[n+a][r+o]=c,s==null||s.set(`${n+a},${r+o}`,t))}}updateSolutionButtonState(){var i;const t=((i=B[g.difficulty])==null?void 0:i.length)??0,e=g.playerGems.every(r=>r.isValid),s=g.playerGems.length===t;this.ui.checkSolutionBtn.disabled=!(e&&s)}_placeSecretGems(){const t=[],e=B[g.difficulty];let s=0;for(;t.length<e.length&&s<500;){s++,t.length=0;for(const i of e){const r=G[i];let n=!1,a=0;for(;!n&&a<200;){a++;let o=r.gridPattern;const c=Math.floor(Math.random()*4);for(let I=0;I<c;I++)o=C(o);const h=o.length,u=o[0].length;if(p<u||L<h)continue;const f=Math.floor(Math.random()*(p-u+1)),m=Math.floor(Math.random()*(L-h+1)),T={id:`secret_${i}_${t.length}`,name:i,x:f,y:m,rotation:c*90,gridPattern:o};this._isPlacementValid(T,t)&&(t.push(T),n=!0)}if(!n)break}}return t.length!==e.length?(console.error("Failed to place all secret gems!"),alert("Fehler bei der Level-Erstellung. Bitte versuchen Sie es erneut."),[]):(t.forEach(i=>this._paintGemOnGrid(i,this.secretGrid,this.secretGemMap)),console.log("Secret gems placed:",t),t)}}class b{constructor(t,e){this.state="normal",this.isUsed=!1,this.isHovered=!1,this.usedColor=null,this.cornerRadius=4,this.id=t,this.label=e,this.rect={x:0,y:0,width:0,height:0}}isInside(t,e){return t>=this.rect.x&&t<=this.rect.x+this.rect.width&&e>=this.rect.y&&e<=this.rect.y+this.rect.height}draw(t){t.save();const e=this.isUsed&&this.usedColor?this.usedColor:"#4a627a";t.beginPath();const s=new Path2D;s.roundRect(this.rect.x,this.rect.y,this.rect.width,this.rect.height,this.cornerRadius),t.fillStyle=e,t.fill(s),this.isHovered&&(t.fillStyle="rgba(255, 255, 255, 0.2)",t.fill(s)),this.state==="highlight"?(t.strokeStyle="#e74c3c",t.lineWidth=3,t.stroke(s)):this.state==="focused"&&(t.strokeStyle="#3498db",t.lineWidth=2,t.stroke(s));let r=(n=>{if(!n||n.length<7)return"#ecf0f1";try{const a=parseInt(n.slice(1,3),16),o=parseInt(n.slice(3,5),16),c=parseInt(n.slice(5,7),16);return a*.299+o*.587+c*.114>186?"#2c3e50":"#ecf0f1"}catch{return"#ecf0f1"}})(e);this.state==="highlight"&&(r="#f1c40f"),t.fillStyle=r,t.font=`bold ${this.rect.height*.45}px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif`,t.textAlign="center",t.textBaseline="middle",t.fillText(this.label,this.rect.x+this.rect.width/2,this.rect.y+this.rect.height/2),t.restore()}}class ${constructor(){this.screens={},this.emitters=[],this.focusedEmitterId=null,this.tooltipTimer=null,this.activeTooltip=null,this.currentHoveredEmitter=null,this.dragStartInfo=null,this.isDragging=!1,this.draggedItemInfo=null,this.dragPos={x:0,y:0},this.lastValidDropTarget={x:-1,y:-1,isValid:!1},this.justDragged=!1,this.cellWidth=0,this.cellHeight=0,this.gap=1,this.cacheDOMElements(),this.bindGlobalEvents(),this._populateIntroRules()}bindGame(t){this.game=t}cacheDOMElements(){this.screens.main=document.getElementById("screen-main"),this.screens.difficulty=document.getElementById("screen-difficulty"),this.screens.game=document.getElementById("screen-game"),this.screens.end=document.getElementById("screen-end"),this.btnStartGame=document.getElementById("btn-start-game"),this.introRulesEl=document.getElementById("intro-rules"),this.difficultyOptions=document.getElementById("difficulty-options"),this.btnBackToMain1=document.getElementById("btn-back-to-main-1"),this.boardWrapper=document.getElementById("game-board-wrapper"),this.gemCanvas=document.getElementById("gem-canvas"),this.gemCtx=this.gemCanvas.getContext("2d"),this.pathOverlay=document.getElementById("path-overlay"),this.pathCtx=this.pathOverlay.getContext("2d"),this.gemToolbar=document.getElementById("gem-toolbar"),this.logList=document.getElementById("log-list"),this.actionsTabBtn=document.getElementById("actions-tab-btn"),this.logTabBtn=document.getElementById("log-tab-btn"),this.checkSolutionBtn=document.getElementById("check-solution-btn"),this.giveUpBtn=document.getElementById("give-up-btn"),this.endTitle=document.getElementById("end-title"),this.endStats=document.getElementById("end-stats"),this.endSolutionCanvas=document.getElementById("end-solution-canvas"),this.endSolutionCtx=this.endSolutionCanvas.getContext("2d"),this.btnNewLevel=document.getElementById("btn-new-level"),this.btnMenu=document.getElementById("btn-menu")}bindGlobalEvents(){this.btnStartGame.addEventListener("click",()=>this.game.showDifficultySelect()),this.btnNewLevel.addEventListener("click",()=>{g.difficulty&&this.game.start(g.difficulty)}),this.btnMenu.addEventListener("click",()=>this.game.showMainMenu()),this.btnBackToMain1.addEventListener("click",()=>this.game.showMainMenu()),this.actionsTabBtn.addEventListener("click",()=>this.switchTab("actions")),this.logTabBtn.addEventListener("click",()=>this.switchTab("log")),this.checkSolutionBtn.addEventListener("click",()=>this.game.checkSolution()),this.giveUpBtn.addEventListener("click",()=>this.game.giveUp()),this.gemCanvas.addEventListener("keydown",t=>this.handleCanvasKeyDown(t)),document.addEventListener("keydown",t=>{if(t.key==="n"&&(g.status===R.PLAYING||g.status===R.GAME_OVER)){g.difficulty&&this.game.start(g.difficulty);return}g.status===R.PLAYING&&t.key==="d"&&this.game.toggleDebugMode()}),this.gemCanvas.addEventListener("click",t=>this.handleCanvasClick(t)),document.addEventListener("mousedown",t=>this.handleMouseDown(t)),document.addEventListener("mousemove",t=>this.handleMouseMove(t)),document.addEventListener("mouseup",t=>this.handleMouseUp(t)),this.logList.addEventListener("mouseover",t=>this.handleLogHover(t)),this.logList.addEventListener("mouseout",()=>this.handleLogLeave())}setupGameUI(){this.switchTab("actions"),this._createEmitterObjects(),this.updateToolbar(),this.logList.innerHTML="",this.clearPath(),this.game.updateSolutionButtonState(),new ResizeObserver(()=>this.onBoardResize()).observe(this.boardWrapper),this.onBoardResize()}showScreen(t){t==="difficulty"&&this.populateDifficultyOptions(),Object.values(this.screens).forEach(e=>e.classList.add("hidden")),this.screens[t].classList.remove("hidden"),t==="game"&&this.gemCanvas.focus()}populateDifficultyOptions(){this.difficultyOptions.innerHTML="";const t={[v.NORMAL]:"Die Grundlagen. Lerne die farbigen und weissen Steine kennen.",[v.MITTEL]:"Eine neue Herausforderung. Ein transparenter Prisma-Stein lenkt das Licht ab, ohne es zu färben.",[v.SCHWER]:"Expertenmodus. Neben dem transparenten kommt ein schwarzer, Licht absorbierender Stein in Spiel."};Object.values(v).forEach(e=>{const s=document.createElement("button");s.innerHTML=`${e}<div class="difficulty-desc">${t[e]}</div>`,s.onclick=()=>this.game.start(e),this.difficultyOptions.appendChild(s)})}_createEmitterObjects(){this.emitters=[];for(let t=0;t<p;t++)this.emitters.push(new b(`T${t+1}`,`T${t+1}`));for(let t=0;t<p;t++)this.emitters.push(new b(`B${t+1}`,`B${t+1}`));for(let t=0;t<L;t++)this.emitters.push(new b(`L${t+1}`,`L${t+1}`));for(let t=0;t<L;t++)this.emitters.push(new b(`R${t+1}`,`R${t+1}`));this.emitters.length>0&&(this.focusedEmitterId=this.emitters[0].id)}onBoardResize(){const t=this.boardWrapper.getBoundingClientRect();if(t.width===0||t.height===0)return;const e=p+2,s=L+2;this.cellWidth=(t.width-(e-1)*this.gap)/e,this.cellHeight=(t.height-(s-1)*this.gap)/s;const i=window.devicePixelRatio||1;[this.pathOverlay,this.gemCanvas].forEach(r=>{r.width=t.width*i,r.height=t.height*i,r.style.width=`${t.width}px`,r.style.height=`${t.height}px`,r.getContext("2d").scale(i,i)}),this.emitters.forEach(r=>{const n=r.id,a=parseInt(n.substring(1))-1;let o=0,c=0;switch(n[0]){case"T":o=a+1,c=0;break;case"B":o=a+1,c=s-1;break;case"L":o=0,c=a+1;break;case"R":o=e-1,c=a+1;break}r.rect.x=o*(this.cellWidth+this.gap),r.rect.y=c*(this.cellHeight+this.gap),r.rect.width=this.cellWidth,r.rect.height=this.cellHeight}),this.redrawAll()}_getGemTooltip(t){var s;const e=G[t];if(!e)return"";switch(t){case"TRANSPARENT":return"Reflektiert nur, färbt nicht.";case"SCHWARZ":return"Absorbiert Licht.";default:if(e.baseGems&&e.baseGems.length>0){const i=e.baseGems[0];return`Fügt Farbe '${(s=P[i])==null?void 0:s.toLowerCase()}' hinzu.`}return`Edelstein ${t}`}}updateToolbar(){if(this.gemToolbar.innerHTML="",!g.difficulty)return;const t=new Set(g.playerGems.map(e=>e.name));B[g.difficulty].forEach(e=>{const s=G[e],i=document.createElement("div");i.className="toolbar-gem",t.has(e)&&i.classList.add("placed"),i.dataset.gemName=e,i.title=this._getGemTooltip(e);const r=document.createElement("canvas");r.className="toolbar-gem-canvas",i.appendChild(r),this.gemToolbar.appendChild(i),setTimeout(()=>this.drawToolbarGem(r,s),0)})}drawToolbarGem(t,e){const s=t.getContext("2d");if(!s)return;const i=window.devicePixelRatio||1,r=t.getBoundingClientRect();if(r.width===0||r.height===0)return;t.width=r.width*i,t.height=r.height*i,s.scale(i,i);const n=e.gridPattern,a=n.length,o=n[0].length,c=Math.max(o,a),h=r.width/c,u=r.height/c,f=(r.width-o*h)/2,m=(r.height-a*u)/2;for(let T=0;T<a;T++)for(let I=0;I<o;I++){const A=n[T][I];A!==l.EMPTY&&this.drawCellShape(s,I*h+f,T*u+m,h,u,A,e.color)}}redrawAll(){if(this.gemCanvas.width===0)return;const t=this.gemCtx;t.clearRect(0,0,this.gemCanvas.width,this.gemCanvas.height),this._drawBoardBackgroundAndGrid(t),this.emitters.forEach(e=>e.draw(t)),g.status===R.PLAYING&&(g.debugMode&&this.drawDebugSolution(t),this.drawPlayerGems(t),this.isDragging&&this.draggedItemInfo&&this.drawDragPreview(t)),this._drawActiveTooltip(t)}drawDragPreview(t){if(!this.draggedItemInfo)return;const{gridPattern:e,name:s,id:i}=this.draggedItemInfo,r=G[s],n=e[0].length,a=e.length,o=this.dragPos.x/(this.cellWidth+this.gap)-1-n/2+.5,c=this.dragPos.y/(this.cellHeight+this.gap)-1-a/2+.5,h=Math.round(o),u=Math.round(c),f={id:i,x:h,y:u,gridPattern:e};this.lastValidDropTarget.isValid=this.game.canPlaceGem(f),this.lastValidDropTarget.x=h,this.lastValidDropTarget.y=u,t.save(),t.globalAlpha=.7;for(let m=0;m<a;m++)for(let T=0;T<n;T++)if(e[m][T]!==l.EMPTY){const I=this._gridToCanvasCoords(h+T,u+m);this.drawCellShape(t,I.x,I.y,this.cellWidth,this.cellHeight,e[m][T],r.color,!this.lastValidDropTarget.isValid)}t.restore()}drawPlayerGems(t){var e,s;for(const i of g.playerGems){if(this.isDragging&&((e=this.draggedItemInfo)==null?void 0:e.from)==="board"&&this.draggedItemInfo.id===i.id)continue;const{gridPattern:r,x:n,y:a,name:o}=i,c=G[o].color,h=!i.isValid;let u=!1;this.isDragging||(u=((s=this.getGemAtCanvasPos(this.dragPos.x,this.dragPos.y))==null?void 0:s.id)===i.id);for(let f=0;f<r.length;f++)for(let m=0;m<r[f].length;m++){const T=r[f][m];if(T!==l.EMPTY){const I=this._gridToCanvasCoords(n+m,a+f);this.drawCellShape(t,I.x,I.y,this.cellWidth,this.cellHeight,T,c,h,u)}}}}_drawBoardBackgroundAndGrid(t){t.save();const e=getComputedStyle(document.documentElement).getPropertyValue("--surface-color"),s=getComputedStyle(document.documentElement).getPropertyValue("--border-color");t.fillStyle=e,t.fillRect(0,0,t.canvas.width,t.canvas.height),t.fillStyle=s,t.fillRect(this.cellWidth+this.gap/2,this.cellHeight+this.gap/2,p*this.cellWidth+(p+1)*this.gap,L*this.cellHeight+(L+1)*this.gap),t.fillStyle=e,t.fillRect(this.cellWidth+this.gap,this.cellHeight+this.gap,p*this.cellWidth+(p-1)*this.gap,L*this.cellHeight+(L-1)*this.gap),t.strokeStyle=s,t.lineWidth=this.gap,t.beginPath();for(let i=1;i<p;i++){const r=(i+1)*(this.cellWidth+this.gap)-this.gap/2;t.moveTo(r,this.cellHeight+this.gap),t.lineTo(r,(L+1)*(this.cellHeight+this.gap))}for(let i=1;i<L;i++){const r=(i+1)*(this.cellHeight+this.gap)-this.gap/2;t.moveTo(this.cellWidth+this.gap,r),t.lineTo((p+1)*(this.cellWidth+this.gap),r)}t.stroke(),t.restore()}drawDebugSolution(t){if(!(!this.game.secretGrid||g.secretGems.length===0)){t.save(),t.globalAlpha=.2;for(const e of g.secretGems){const{gridPattern:s,x:i,y:r,name:n}=e,a=G[n].color;for(let o=0;o<s.length;o++)for(let c=0;c<s[o].length;c++){const h=s[o][c];if(h!==l.EMPTY){const u=this._gridToCanvasCoords(i,r);this.drawCellShape(t,u.x+c*this.cellWidth,u.y+o*this.cellHeight,this.cellWidth,this.cellHeight,h,a)}}}t.restore()}}drawCellShape(t,e,s,i,r,n,a,o=!1,c=!1){t.save(),a===E.TRANSPARENT?(t.fillStyle="rgba(164, 212, 228, 0.3)",t.strokeStyle="#a4d4e4",t.lineWidth=2):(t.fillStyle=a,t.strokeStyle="rgba(0,0,0,0.4)",t.lineWidth=1),o&&(t.fillStyle="rgba(231, 76, 60, 0.5)",t.strokeStyle=E.INVALID_GEM,t.lineWidth=2),c&&!o&&(t.shadowColor="white",t.shadowBlur=10),t.beginPath();const h=new Path2D;switch(n){case l.BLOCK:case l.ABSORB:h.rect(e,s,i,r);break;case l.TRIANGLE_TL:h.moveTo(e,s),h.lineTo(e+i,s),h.lineTo(e,s+r),h.closePath();break;case l.TRIANGLE_TR:h.moveTo(e,s),h.lineTo(e+i,s),h.lineTo(e+i,s+r),h.closePath();break;case l.TRIANGLE_BR:h.moveTo(e+i,s),h.lineTo(e+i,s+r),h.lineTo(e,s+r),h.closePath();break;case l.TRIANGLE_BL:h.moveTo(e,s),h.lineTo(e,s+r),h.lineTo(e+i,s+r),h.closePath();break}t.fill(h),t.stroke(h),t.restore()}_drawActiveTooltip(t){if(!this.activeTooltip)return;const{x:e,y:s,width:i,height:r,text:n}=this.activeTooltip;t.save(),t.font="bold 14px sans-serif";const o=t.measureText(n).width,c=14,h=8;let u=e+i/2-(o/2+h),f=s-c-h*2;f<0&&(f=s+r+h),u<0&&(u=h),u+o+h*2>t.canvas.width/(window.devicePixelRatio||1)&&(u=t.canvas.width/(window.devicePixelRatio||1)-o-h*2),t.fillStyle="rgba(0, 0, 0, 0.8)";const m=new Path2D;m.roundRect(u,f,o+h*2,c+h,5),t.fill(m),t.fillStyle="white",t.textAlign="center",t.textBaseline="middle",t.fillText(n,u+o/2+h,f+c/2+h/2),t.restore()}_gridToCanvasCoords(t,e){return{x:(t+1)*(this.cellWidth+this.gap),y:(e+1)*(this.cellHeight+this.gap)}}_canvasToGridCoords(t,e){return{x:Math.floor(t/(this.cellWidth+this.gap))-1,y:Math.floor(e/(this.cellHeight+this.gap))-1}}getPathColor(t){if(t.absorbed)return E.ABSORBIERT;if(t.colors.length===0)return"rgba(236, 240, 241, 0.7)";const e=[...t.colors].sort().join(",");return _[e]||"#ccc"}showWavePath(t){if(this.clearPath(),!g.debugMode)return;const e=this.getPathColor(t);this.drawPath(t.path,e)}drawPath(t,e){if(t.length<2)return;const s=this.pathCtx;this.clearPath(),s.strokeStyle=e,s.lineWidth=3,s.lineCap="round",s.lineJoin="round",s.shadowColor="rgba(0,0,0,0.5)",s.shadowBlur=5,s.beginPath();const i=this.cellWidth+this.gap,r=this.cellHeight+this.gap,n=this.cellWidth+this.gap,a=this.cellHeight+this.gap,o=h=>{const u=i+h.x*n,f=r+h.y*a;return{x:u,y:f}},c=o(t[0]);s.moveTo(c.x,c.y);for(let h=1;h<t.length;h++)s.lineTo(o(t[h]).x,o(t[h]).y);s.stroke()}clearPath(){this.pathCtx.clearRect(0,0,this.pathOverlay.width,this.pathOverlay.height)}switchTab(t){document.querySelectorAll(".tab-btn, .tab-panel").forEach(e=>e.classList.remove("active")),document.getElementById(`${t}-tab-btn`).classList.add("active"),document.getElementById(`${t}-panel`).classList.add("active")}addLogEntry(t,e){const s=document.createElement("li");s.dataset.waveId=e;const{result:i}=t,r=`${e} ➔ ${i.exitId}`,n=this.getPathColor(i),a=this._getPathColorName(i);s.innerHTML=`<span>${r}</span><div class="log-entry-result"><span class="log-color-name">${a}</span><div class="log-color-box" style="background-color: ${n};"></div></div>`,this.logList.prepend(s),this.switchTab("log");const o=this.emitters.find(c=>c.id===e);if(o&&(o.isUsed=!0,o.usedColor=n),i.exitId&&i.exitId!=="Loop?"){const c=this.emitters.find(h=>h.id===i.exitId);c&&(c.isUsed=!0,c.usedColor=n)}this.redrawAll()}showEndScreen(t,e,s,i){this.endTitle.textContent=t?"Gewonnen!":"Verloren!",this.endStats.textContent=t?`Du hast die Mine in ${e} Abfragen gelöst!`:`Du hast ${e} Abfragen gebraucht.`,this.showScreen("end"),requestAnimationFrame(()=>{const r=t?[]:i;this.drawEndScreenSolution(this.endSolutionCtx,s,r)})}drawEndScreenSolution(t,e,s){const i=t.canvas,r=window.devicePixelRatio||1,n=i.getBoundingClientRect();if(n.width===0)return;i.width=n.width*r,i.height=n.height*r,t.scale(r,r),t.clearRect(0,0,n.width,n.height);const a=(n.width-(p-1)*1)/p,o=(n.height-(L-1)*1)/L;t.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--surface-color"),t.fillRect(0,0,n.width,n.height),this.drawGemSet(t,e,{cellW:a,cellH:o,gap:1,opacity:1,highlightInvalid:!1}),s.length>0&&this.drawGemSet(t,s,{cellW:a,cellH:o,gap:1,opacity:.55,highlightInvalid:!0})}drawGemSet(t,e,s){t.save(),t.globalAlpha=s.opacity;for(const i of e){const r=G[i.name].color,n=!!s.highlightInvalid&&!i.isValid;for(let a=0;a<i.gridPattern.length;a++)for(let o=0;o<i.gridPattern[a].length;o++){const c=i.gridPattern[a][o];if(c!==l.EMPTY){const h=i.x*(s.cellW+s.gap)+o*s.cellW,u=i.y*(s.cellH+s.gap)+a*s.cellH;this.drawCellShape(t,h,u,s.cellW,s.cellH,c,r,n)}}}t.restore()}handleCanvasClick(t){if(this.justDragged)return;const e=this.gemCanvas.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top,r=this.emitters.find(a=>a.isInside(s,i));if(r){r.isUsed||this.game.sendWave(r.id);return}const n=this.getGemAtCanvasPos(s,i);n&&this.game.rotatePlayerGem(n.id)}clearAllHighlightsAndTooltips(){this.tooltipTimer&&(clearTimeout(this.tooltipTimer),this.tooltipTimer=null),this.activeTooltip=null,this.emitters.forEach(t=>{t.state==="highlight"&&(t.state="normal")})}handleCanvasHover(t){if(this.isDragging)return;const e=this.gemCanvas.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top;this.dragPos={x:s,y:i};const r=this.emitters.find(n=>n.isInside(s,i));this.currentHoveredEmitter!==r&&(this.currentHoveredEmitter&&(this.currentHoveredEmitter.isHovered=!1),this.clearAllHighlightsAndTooltips(),this.currentHoveredEmitter=r||null,this.currentHoveredEmitter&&(this.currentHoveredEmitter.isHovered=!0,this.currentHoveredEmitter.isUsed&&(this.tooltipTimer=window.setTimeout(()=>this._showHoverTooltip(this.currentHoveredEmitter.id),750))),this.redrawAll())}handleCanvasMouseLeave(){this.dragPos={x:-1,y:-1},this.currentHoveredEmitter&&(this.currentHoveredEmitter.isHovered=!1,this.currentHoveredEmitter=null),this.clearAllHighlightsAndTooltips(),this.redrawAll()}_showHoverTooltip(t){this.tooltipTimer=null;const e=g.log.find(o=>o.waveId===t||o.result.exitId===t);if(!e)return;const s=this.emitters.find(o=>o.id===e.waveId),i=this.emitters.find(o=>o.id===e.result.exitId);if(!s||!i)return;const r=this._getPathColorName(e.result),n=s.id===t?i.id:s.id;s.state="highlight",i.state="highlight";const a=this.emitters.find(o=>o.id===t);this.activeTooltip={text:`${r} ➔ ${n}`,x:a.rect.x,y:a.rect.y,width:a.rect.width,height:a.rect.height,emitter1Id:s.id,emitter2Id:i.id},this.redrawAll()}handleCanvasKeyDown(t){if(!["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Enter"," "].includes(t.key))return;t.preventDefault();const e=this.emitters.find(r=>r.id===this.focusedEmitterId);if(e&&(e.state="normal"),t.key==="Enter"||t.key===" "){if(this.focusedEmitterId){const r=this.emitters.find(n=>n.id===this.focusedEmitterId);r&&!r.isUsed&&this.game.sendWave(this.focusedEmitterId)}e&&(e.state="focused"),this.redrawAll();return}const s=this.emitters.findIndex(r=>r.id===this.focusedEmitterId);if(s===-1)return;let i=-1;switch(t.key){case"ArrowRight":i=(s+1)%this.emitters.length;break;case"ArrowLeft":i=(s-1+this.emitters.length)%this.emitters.length;break;case"ArrowUp":i=(s-1+this.emitters.length)%this.emitters.length;break;case"ArrowDown":i=(s+1)%this.emitters.length;break}if(i!==-1){this.focusedEmitterId=this.emitters[i].id;const r=this.emitters[i];r&&(r.state="focused"),this.redrawAll()}}handleMouseDown(t){if(t.button!==0)return;const s=t.target.closest(".toolbar-gem:not(.placed)"),i=this.gemCanvas.getBoundingClientRect(),r=t.clientX>=i.left&&t.clientX<=i.right&&t.clientY>=i.top&&t.clientY<=i.bottom;let n=null;if(s){const a=s.dataset.gemName;n={name:a,from:"toolbar",gridPattern:G[a].gridPattern,element:s,offsetX:t.offsetX,offsetY:t.offsetY}}else if(r){const a=t.clientX-i.left,o=t.clientY-i.top,c=this.getGemAtCanvasPos(a,o);if(c){const h=this._canvasToGridCoords(a,o);n={id:c.id,name:c.name,from:"board",gridPattern:c.gridPattern,offsetX:(h.x-c.x)*this.cellWidth,offsetY:(h.y-c.y)*this.cellHeight}}}n&&(this.dragStartInfo={item:n,startX:t.clientX,startY:t.clientY})}handleMouseMove(t){if(this.dragStartInfo){if(!this.isDragging){const e=t.clientX-this.dragStartInfo.startX,s=t.clientY-this.dragStartInfo.startY;Math.sqrt(e*e+s*s)>5&&(this.isDragging=!0,this.draggedItemInfo=this.dragStartInfo.item,this.draggedItemInfo.element&&this.draggedItemInfo.element.classList.add("dragging"))}if(this.isDragging){const e=this.gemCanvas.getBoundingClientRect();this.dragPos={x:t.clientX-e.left,y:t.clientY-e.top},this.redrawAll()}}else t.target===this.gemCanvas?this.handleCanvasHover(t):this.handleCanvasMouseLeave()}handleMouseUp(t){var e;if(this.isDragging&&this.draggedItemInfo){this.justDragged=!0,setTimeout(()=>{this.justDragged=!1},0);const s=this.gemCanvas.getBoundingClientRect();if(t.clientX>=s.left&&t.clientX<=s.right&&t.clientY>=s.top&&t.clientY<=s.bottom){if(this.lastValidDropTarget.isValid){const{x:r,y:n}=this.lastValidDropTarget;this.draggedItemInfo.from==="toolbar"?this.game.addPlayerGem(this.draggedItemInfo.name,r,n):this.draggedItemInfo.id&&this.game.movePlayerGem(this.draggedItemInfo.id,r,n)}}else this.draggedItemInfo.from==="board"&&this.draggedItemInfo.id&&this.game.removePlayerGem(this.draggedItemInfo.id)}(e=this.dragStartInfo)!=null&&e.item.element&&this.dragStartInfo.item.element.classList.remove("dragging"),this.dragStartInfo=null,this.isDragging=!1,this.draggedItemInfo=null,this.redrawAll(),this.updateToolbar()}getGemAtCanvasPos(t,e){if(t<0||e<0)return null;const{x:s,y:i}=this._canvasToGridCoords(t,e);for(let r=g.playerGems.length-1;r>=0;r--){const n=g.playerGems[r],a=n.gridPattern.length,o=n.gridPattern[0].length;if(s>=n.x&&s<n.x+o&&i>=n.y&&i<n.y+a&&n.gridPattern[i-n.y][s-n.x]!==l.EMPTY)return n}return null}_getPathColorName(t){if(t.absorbed)return"Absorbiert";if(t.colors.length===0)return"Keine Farbe";const e=[...t.colors].sort().join(",");return P[e]||"Unbekannte Mischung"}handleLogHover(t){const e=t.target;if(!(e instanceof Element))return;const s=e.closest("li[data-wave-id]");if(this.clearAllHighlightsAndTooltips(),s){s.classList.add("highlight-pair");const i=s.dataset.waveId,r=g.log.find(n=>n.waveId===i);if(r){g.debugMode&&this.drawPath(r.path,this.getPathColor(r.result));const n=this.emitters.find(a=>a.id===r.waveId);if(n&&(n.state="highlight"),r.result.exitId){const a=this.emitters.find(o=>o.id===r.result.exitId);a&&(a.state="highlight")}}}this.redrawAll()}handleLogLeave(){this.clearPath(),document.querySelectorAll("#log-list li.highlight-pair").forEach(t=>t.classList.remove("highlight-pair")),this.clearAllHighlightsAndTooltips(),this.redrawAll()}_populateIntroRules(){this.introRulesEl.innerHTML=`
            <h3>Spielanleitung</h3>
            <p><strong>Ziel:</strong> Finde die Position und Ausrichtung der versteckten Edelsteine.</p>
            <ul>
                <li>Sende Lichtwellen von den Rändern in das Spielfeld.</li>
                <li>Die austretende Farbe und Position verraten, welche Steine getroffen wurden.</li>
                <li>Ziehe Edelsteine aus der Werkzeugleiste auf das Feld. Du kannst sie verschieben und drehen.</li>
                <li>Ein Klick auf einen platzierten Stein dreht ihn um 90°.</li>
                <li>Steine dürfen sich nicht überlappen oder Kante an Kante liegen.</li>
                <li>Drücke 'n' für ein neues Level mit der aktuellen Schwierigkeit.</li>
            </ul>
            <p><strong>Farbmischung:</strong></p>
            <ul>
                <li>Rot + Blau = Lila</li>
                <li>Blau + Gelb = Grün</li>
                <li>Rot + Gelb = Orange</li>
                <li>Jede Farbe + Weiss = Hellere Variante</li>
                <li>Alle 3 Grundfarben = Dunkelgrau</li>
            </ul>
        `}}document.addEventListener("DOMContentLoaded",()=>{const d=new $,t=new x(d);window.game=t});
