(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const T=8,I=10;var l=(g=>(g[g.EMPTY=0]="EMPTY",g[g.BLOCK=1]="BLOCK",g[g.TRIANGLE_TL=2]="TRIANGLE_TL",g[g.TRIANGLE_TR=3]="TRIANGLE_TR",g[g.TRIANGLE_BR=4]="TRIANGLE_BR",g[g.TRIANGLE_BL=5]="TRIANGLE_BL",g[g.ABSORB=6]="ABSORB",g))(l||{});const v={TRAINING:"Training",NORMAL:"Normal",MITTEL:"Mittel",SCHWER:"Schwer",CUSTOM:"Eigenes Level"},p={GELB:"#f1c40f",ROT:"#e74c3c",BLAU:"#3498db",WEISS:"#ecf0f1",TRANSPARENT:"#95a5a6",LILA:"#9b59b6",HIMMELBLAU:"#5dade2",GRUEN:"#2ecc71",PINK:"#ff8a80",ORANGE:"#e67e22",ZITRONE:"#ffff8d",HELLLILA:"#ba68c8",SCHWARZ_GEM:"#1d1d1d",SCHWARZ_MIX:"#34495e",HELLGRUEN:"#81c784",HELLORANGE:"#ffb74d",GRAU:"#9e9e9e",ABSORBIERT:"#17202a",correct:"#4caf50",INVALID_GEM:"#e74c3c"},H={ROT:{name:"Rot",color:p.ROT,baseGems:["ROT"]},GELB:{name:"Gelb",color:p.GELB,baseGems:["GELB"]},BLAU:{name:"Blau",color:p.BLAU,baseGems:["BLAU"]},WEISS:{name:"Weiss",color:p.WEISS,baseGems:["WEISS"]},TRANSPARENT:{name:"Transparent",color:p.TRANSPARENT,baseGems:[]},SCHWARZ:{name:"Schwarz",color:p.SCHWARZ_GEM,baseGems:[],special:"absorbs"}},x={BLAU:p.BLAU,GELB:p.GELB,ROT:p.ROT,WEISS:p.WEISS,"BLAU,ROT":p.LILA,"BLAU,WEISS":p.HIMMELBLAU,"BLAU,GELB":p.GRUEN,"ROT,WEISS":p.PINK,"GELB,ROT":p.ORANGE,"GELB,WEISS":p.ZITRONE,"BLAU,ROT,WEISS":p.HELLLILA,"BLAU,GELB,ROT":p.SCHWARZ_MIX,"BLAU,GELB,WEISS":p.HELLGRUEN,"GELB,ROT,WEISS":p.HELLORANGE,"BLAU,GELB,ROT,WEISS":p.GRAU},W={BLAU:"Blau",GELB:"Gelb",ROT:"Rot",WEISS:"Weiss",TRANSPARENT:"Transparent",SCHWARZ:"Schwarz","BLAU,ROT":"Lila","BLAU,WEISS":"Himmelblau","BLAU,GELB":"Grün","ROT,WEISS":"Hellrot","GELB,ROT":"Orange","GELB,WEISS":"Hellgelb","BLAU,ROT,WEISS":"Hell-Lila","BLAU,GELB,ROT":"Dunkelgrau","BLAU,GELB,WEISS":"Hellgrün","GELB,ROT,WEISS":"Hell-Orange","BLAU,GELB,ROT,WEISS":"Grau"},_={GELB:{name:"GELB",color:p.GELB,baseGems:["GELB"],gridPattern:[[l.TRIANGLE_BL,l.EMPTY],[l.BLOCK,l.TRIANGLE_BL]]},ROT:{name:"ROT",color:p.ROT,baseGems:["ROT"],gridPattern:[[l.TRIANGLE_BR,l.BLOCK,l.TRIANGLE_TL]]},BLAU:{name:"BLAU",color:p.BLAU,baseGems:["BLAU"],gridPattern:[[l.EMPTY,l.TRIANGLE_BR,l.TRIANGLE_BL,l.EMPTY],[l.TRIANGLE_BR,l.BLOCK,l.BLOCK,l.TRIANGLE_BL]]},WEISS_RAUTE:{name:"WEISS_RAUTE",color:p.WEISS,baseGems:["WEISS"],gridPattern:[[l.TRIANGLE_BR,l.TRIANGLE_BL],[l.TRIANGLE_TR,l.TRIANGLE_TL]]},WEISS_DREIECK:{name:"WEISS_DREIECK",color:p.WEISS,baseGems:["WEISS"],gridPattern:[[l.EMPTY,l.TRIANGLE_BR,l.TRIANGLE_BL,l.EMPTY],[l.TRIANGLE_BR,l.BLOCK,l.BLOCK,l.TRIANGLE_BL]]},TRANSPARENT:{name:"TRANSPARENT",color:p.TRANSPARENT,baseGems:[],gridPattern:[[l.TRIANGLE_BR,l.TRIANGLE_BL]]},SCHWARZ:{name:"SCHWARZ",color:p.SCHWARZ_GEM,baseGems:[],special:"absorbs",gridPattern:[[l.ABSORB,l.ABSORB]]}},U={SHAPE_RTRIANGLE:{name:"Rechtwinkliges Dreieck",gridPattern:_.GELB.gridPattern},SHAPE_PARALLEL:{name:"Parallelogramm",gridPattern:_.ROT.gridPattern},SHAPE_BIG_TRIANGLE:{name:"Grosses Dreieck",gridPattern:_.BLAU.gridPattern},SHAPE_DIAMOND:{name:"Raute",gridPattern:_.WEISS_RAUTE.gridPattern},SHAPE_SMALL_TRIANGLE:{name:"Kleines Dreieck",gridPattern:_.TRANSPARENT.gridPattern},SHAPE_ABSORBER:{name:"Absorber",gridPattern:_.SCHWARZ.gridPattern},SHAPE_L:{name:"L-Form",gridPattern:[[l.TRIANGLE_BR,l.TRIANGLE_BL],[l.BLOCK,l.TRIANGLE_TL]]},SHAPE_T:{name:"T-Form",gridPattern:[[l.TRIANGLE_BR,l.BLOCK,l.TRIANGLE_BL],[l.TRIANGLE_TR,l.BLOCK,l.TRIANGLE_TL]]},SHAPE_SQUARE:{name:"Quadrat",gridPattern:[[l.TRIANGLE_BR,l.BLOCK],[l.BLOCK,l.TRIANGLE_TL]]},SHAPE_BAR:{name:"Stab",gridPattern:[[l.TRIANGLE_BL],[l.BLOCK],[l.TRIANGLE_TL]]},SHAPE_SMALL:{name:"Small",gridPattern:[[l.TRIANGLE_TR,l.TRIANGLE_BL]]},SHAPE_STRANGE:{name:"Strange",gridPattern:[[l.TRIANGLE_BL,l.TRIANGLE_BR],[l.TRIANGLE_TL,l.TRIANGLE_TR]]}},k={[v.TRAINING]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK"],[v.NORMAL]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK"],[v.MITTEL]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK","TRANSPARENT"],[v.SCHWER]:["GELB","ROT","BLAU","WEISS_RAUTE","WEISS_DREIECK","TRANSPARENT","SCHWARZ"]},$={[v.TRAINING]:[{limit:8,text:"Sehr gut"},{limit:10,text:"Gut"},{limit:20,text:"Normal"},{limit:1/0,text:"Verbesserungsfähig"}],[v.NORMAL]:[{limit:10,text:"Ein wahrer Experte bei der Edelsteinsuche"},{limit:13,text:"Ein Profi, dem kaum einer was vormacht"},{limit:18,text:"Guter Edelsteinsucher"},{limit:23,text:"Juhu, alle Edelsteine gefunden!"},{limit:1/0,text:"Immerhin alle Edelsteine gefunden."}],[v.MITTEL]:[{limit:12,text:"Meisterlich! Kaum eine Abfrage zu viel."},{limit:15,text:"Sehr beeindruckend! Du kennst dich aus."},{limit:20,text:"Starke Leistung! Du hast den Dreh raus."},{limit:25,text:"Gut gemacht! Alle Schätze geborgen."},{limit:1/0,text:"Geduld und Spucke führen zum Ziel!"}],[v.SCHWER]:[{limit:15,text:"Legendär! Eine Leistung für die Geschichtsbücher."},{limit:18,text:"Herausragend! Selbst Experten staunen."},{limit:21,text:"Experten-Niveau! Du hast es wirklich drauf."},{limit:25,text:"Ein hartes Stück Arbeit, aber erfolgreich!"},{limit:1/0,text:"Puh, das war knapp, aber gewonnen!"}],[v.CUSTOM]:[{limit:15,text:"Legendär! Eine Leistung für die Geschichtsbücher."},{limit:18,text:"Herausragend! Selbst Experten staunen."},{limit:21,text:"Experten-Niveau! Du hast es wirklich drauf."},{limit:25,text:"Ein hartes Stück Arbeit, aber erfolgreich!"},{limit:1/0,text:"Puh, das war knapp, aber gewonnen!"}]};var C=(g=>(g[g.MAIN_MENU=0]="MAIN_MENU",g[g.DIFFICULTY_SELECT=1]="DIFFICULTY_SELECT",g[g.CUSTOM_CREATOR=2]="CUSTOM_CREATOR",g[g.PLAYING=3]="PLAYING",g[g.GAME_OVER=4]="GAME_OVER",g))(C||{});const a={status:0,difficulty:null,secretGems:[],playerGems:[],log:[],waveCount:0,debugMode:!1,showPlayerPathPreview:!1,selectedLogEntryWaveId:null,previewSourceEmitterId:null,activePlayerPath:null,activePlayerResult:null,customGemSet:[],customGemDefinitions:{}};var b=(g=>(g[g.UP=0]="UP",g[g.RIGHT=1]="RIGHT",g[g.DOWN=2]="DOWN",g[g.LEFT=3]="LEFT",g))(b||{});const Z={[l.BLOCK]:{0:2,1:3,2:0,3:1},[l.TRIANGLE_TR]:{0:3,1:2,2:0,3:1},[l.TRIANGLE_BL]:{0:2,1:3,2:1,3:0},[l.TRIANGLE_TL]:{0:1,1:3,2:0,3:2},[l.TRIANGLE_BR]:{0:2,1:0,2:3,3:1}},q={[l.EMPTY]:l.EMPTY,[l.BLOCK]:l.BLOCK,[l.ABSORB]:l.ABSORB,[l.TRIANGLE_TL]:l.TRIANGLE_TR,[l.TRIANGLE_TR]:l.TRIANGLE_BR,[l.TRIANGLE_BR]:l.TRIANGLE_BL,[l.TRIANGLE_BL]:l.TRIANGLE_TL};function j(g,e){var t;return g===l.EMPTY?null:((t=Z[g])==null?void 0:t[e])??null}function Y(g){const e=g.length,t=g[0].length,n=Array.from({length:t},()=>Array(e).fill(l.EMPTY));for(let s=0;s<e;s++)for(let i=0;i<t;i++)n[i][e-1-s]=q[g[s][i]];return n}const J=100;function Q(g){const e=parseInt(g.substring(1))-1;switch(g[0]){case"T":return{pos:{x:e,y:-1},dir:b.DOWN};case"B":return{pos:{x:e,y:I},dir:b.UP};case"L":return{pos:{x:-1,y:e},dir:b.RIGHT};case"R":return{pos:{x:T,y:e},dir:b.LEFT};default:return null}}function ee(g){return g.y<0?`T${g.x+1}`:g.y>=I?`B${g.x+1}`:g.x<0?`L${g.y+1}`:g.x>=T?`R${g.y+1}`:"Error"}function te(g,e){switch(e){case b.UP:g.y--;break;case b.DOWN:g.y++;break;case b.LEFT:g.x--;break;case b.RIGHT:g.x++;break}}function M(g,e,t,n){const s=Q(t);if(!s)return{exitId:"Error",colors:[],path:[],absorbed:!1};const i={...s.pos};let r=s.dir;const o=[],d=new Set,h=new Set;for(let c=0;c<J;c++){if(te(i,r),o.length===0&&o.push({x:s.pos.x+(s.dir===b.RIGHT?1:s.dir===b.LEFT?0:.5),y:s.pos.y+(s.dir===b.DOWN?1:s.dir===b.UP?0:.5)}),i.x<0||i.x>=T||i.y<0||i.y>=I)return o.push({x:i.x+(r===b.LEFT?1:r===b.RIGHT?0:.5),y:i.y+(r===b.UP?1:r===b.DOWN?0:.5)}),{exitId:ee(i),colors:[...d],path:o,absorbed:!1};const m=g[i.y][i.x];if(m===l.EMPTY)continue;o.push({x:i.x+.5,y:i.y+.5});const u=`${i.y},${i.x}`,f=e.get(u);if(f&&!h.has(f.id)){h.add(f.id);const L=n.getGemDefinition(f.name);L&&L.baseGems&&L.baseGems.forEach(E=>d.add(E))}if(m===l.ABSORB)return{exitId:"Absorbed",colors:[],path:o,absorbed:!0};const S=j(m,r);S!==null&&(r=S)}return{exitId:"Loop?",colors:[...d],path:o,absorbed:!1}}const K={[l.EMPTY]:[!1,!1,!1,!1],[l.BLOCK]:[!0,!0,!0,!0],[l.ABSORB]:[!0,!0,!0,!0],[l.TRIANGLE_TL]:[!0,!1,!1,!0],[l.TRIANGLE_TR]:[!0,!0,!1,!1],[l.TRIANGLE_BR]:[!1,!0,!0,!1],[l.TRIANGLE_BL]:[!1,!1,!0,!0]};class ie{constructor(e){this.secretGrid=[],this.secretGemMap=new Map,this.ui=e,this.ui.bindGame(this),this.showMainMenu()}_initSecretGrid(){this.secretGrid=Array.from({length:I},()=>Array(T).fill(l.EMPTY)),this.secretGemMap.clear()}showMainMenu(){a.status=C.MAIN_MENU,this.ui.showScreen("main")}showDifficultySelect(){a.status=C.DIFFICULTY_SELECT,this.ui.showScreen("difficulty")}showCustomCreator(){a.status=C.CUSTOM_CREATOR,this.ui.showScreen("custom-creator")}showEndScreen(e){a.status=C.GAME_OVER,this.ui.showEndScreen(e,a.waveCount,a.secretGems,a.playerGems)}start(e){if(a.difficulty=e,a.status=C.PLAYING,this._initSecretGrid(),a.secretGems=this._placeSecretGems(),a.secretGems.length===0){this.showDifficultySelect();return}a.playerGems=[],a.log=[],a.waveCount=0,a.debugMode=!1,a.showPlayerPathPreview=!1,a.selectedLogEntryWaveId=null,a.previewSourceEmitterId=null,a.activePlayerPath=null,a.activePlayerResult=null,this.ui.setupGameUI(),this.ui.showScreen("game"),this.ui.redrawAll()}giveUp(){this.showEndScreen(!1)}toggleDebugMode(){a.debugMode=!a.debugMode,this.ui.redrawAll()}togglePlayerPathPreview(){a.showPlayerPathPreview=!a.showPlayerPathPreview,this.ui.updatePreviewToggleState(a.showPlayerPathPreview),this.ui.redrawAll()}getGemDefinition(e){const n=a.difficulty===v.CUSTOM?a.customGemDefinitions[e]:_[e];return n||console.error(`Could not find definition for gem: ${e}`),n}sendWave(e){if(a.status!==C.PLAYING)return;a.waveCount++;const t=M(this.secretGrid,this.secretGemMap,e,this),n=Array.from({length:I},()=>Array(T).fill(l.EMPTY)),s=new Map;a.playerGems.forEach(o=>this._paintGemOnGrid(o,n,s));const i=M(n,s,e,this),r={waveId:e,result:t,path:t.path,playerPath:i.path,playerResult:i};a.log.push(r),this.ui.addLogEntry(r,e),this.setSelectedWave(e,e)}checkSolution(){const e=Array.from({length:I},()=>Array(T).fill(l.EMPTY)),t=new Map;a.playerGems.forEach(i=>this._paintGemOnGrid(i,e,t));const n=[];for(let i=1;i<=T;i++)n.push(`T${i}`,`B${i}`);for(let i=1;i<=I;i++)n.push(`L${i}`,`R${i}`);let s=!0;for(const i of n){const r=M(this.secretGrid,this.secretGemMap,i,this),o=M(e,t,i,this),d=[...r.colors].sort().join(","),h=[...o.colors].sort().join(",");if(r.exitId!==o.exitId||d!==h){s=!1;break}}this.showEndScreen(s)}addPlayerGem(e,t,n){if(a.playerGems.some(h=>h.name===e))return;const i=this.getGemDefinition(e);if(!i)return;const r={id:`player_${Date.now()}`,name:e,x:t,y:n,rotation:0,gridPattern:i.gridPattern,isValid:!1},o=r.gridPattern.length,d=r.gridPattern[0].length;r.x=Math.max(0,Math.min(t,T-d)),r.y=Math.max(0,Math.min(n,I-o)),a.playerGems.push(r),this._revalidateAllPlayerGems(),this._updateActivePlayerPathPreview(),this.updateSolutionButtonState(),this.ui.updateToolbar(),this.ui.redrawAll()}movePlayerGem(e,t,n){const s=a.playerGems.find(i=>i.id===e);if(s){const i=s.gridPattern.length,r=s.gridPattern[0].length;s.x=Math.max(0,Math.min(t,T-r)),s.y=Math.max(0,Math.min(n,I-i)),this._revalidateAllPlayerGems(),this._updateActivePlayerPathPreview(),this.updateSolutionButtonState(),this.ui.redrawAll()}}removePlayerGem(e){const t=a.playerGems.findIndex(n=>n.id===e);t>-1&&(a.playerGems.splice(t,1),this._revalidateAllPlayerGems(),this._updateActivePlayerPathPreview(),this.updateSolutionButtonState(),this.ui.updateToolbar(),this.ui.redrawAll())}rotatePlayerGem(e){const t=a.playerGems.find(n=>n.id===e);if(t){const n=t.gridPattern[0].length,s=t.gridPattern.length,i=t.x+n/2,r=t.y+s/2;t.rotation=(t.rotation+90)%360,t.gridPattern=Y(t.gridPattern);const o=t.gridPattern[0].length,d=t.gridPattern.length;t.x=Math.round(i-o/2),t.y=Math.round(r-d/2),t.x=Math.max(0,Math.min(t.x,T-o)),t.y=Math.max(0,Math.min(t.y,I-d)),this._revalidateAllPlayerGems(),this._updateActivePlayerPathPreview(),this.updateSolutionButtonState(),this.ui.redrawAll()}}canPlaceGem(e){return this._isPlacementValid(e,a.playerGems)}setSelectedWave(e,t){a.selectedLogEntryWaveId=e,a.previewSourceEmitterId=t,this._updateActivePlayerPathPreview(),this.ui.handleSelectionChange()}_updateActivePlayerPathPreview(){if(!a.previewSourceEmitterId){a.activePlayerPath=null,a.activePlayerResult=null;return}const e=Array.from({length:I},()=>Array(T).fill(l.EMPTY)),t=new Map;a.playerGems.forEach(s=>this._paintGemOnGrid(s,e,t));const n=M(e,t,a.previewSourceEmitterId,this);a.activePlayerPath=n.path,a.activePlayerResult=n}_revalidateAllPlayerGems(){a.playerGems.forEach(e=>{e.isValid=this._isPlacementValid(e,a.playerGems)})}_doGemsCollide(e,t){const n=e.gridPattern.length,s=e.gridPattern[0].length,i=t.gridPattern.length,r=t.gridPattern[0].length,o=this.getGemDefinition(e.name),d=this.getGemDefinition(t.name),h=(o==null?void 0:o.special)==="absorbs"||(d==null?void 0:d.special)==="absorbs";for(let c=0;c<n;c++)for(let m=0;m<s;m++){const u=e.gridPattern[c][m];if(u===l.EMPTY)continue;const f=e.x+m,S=e.y+c;for(let L=0;L<i;L++)for(let E=0;E<r;E++){const G=t.gridPattern[L][E];if(G===l.EMPTY)continue;const A=t.x+E,y=t.y+L,R=Math.abs(f-A),w=Math.abs(S-y);if(h){if(R<=1&&w<=1)return!0}else{if(R===0&&w===0)return!0;if(R+w===1){const B=K[u],P=K[G];if(f<A){if(B[1]&&P[3])return!0}else if(f>A){if(B[3]&&P[1])return!0}else if(S<y){if(B[2]&&P[0])return!0}else if(B[0]&&P[2])return!0}}}}return!1}_isPlacementValid(e,t){const{gridPattern:n,x:s,y:i,id:r}=e,o=n.length,d=n[0].length;if(s<0||i<0||s+d>T||i+o>I)return!1;for(const h of t)if(!(r&&h.id===r)&&this._doGemsCollide(e,h))return!1;return!0}_paintGemOnGrid(e,t,n){const{gridPattern:s,x:i,y:r}=e;for(let o=0;o<s.length;o++)for(let d=0;d<s[o].length;d++){const h=s[o][d];h!==l.EMPTY&&t[r+o]&&t[r+o][i+d]!==void 0&&(t[r+o][i+d]=h,n==null||n.set(`${r+o},${i+d}`,e))}}updateSolutionButtonState(){var i;const t=a.difficulty===v.CUSTOM?a.customGemSet.length:((i=k[a.difficulty])==null?void 0:i.length)??0,n=a.playerGems.every(r=>r.isValid),s=a.playerGems.length===t;this.ui.checkSolutionBtn.disabled=!(n&&s)}_placeSecretGems(){const e=[],n=a.difficulty===v.CUSTOM?a.customGemSet:k[a.difficulty];if(!n||n.length===0)return console.error("Gem set is empty for difficulty:",a.difficulty),[];let s=0;for(;e.length<n.length&&s<500;){s++,e.length=0;for(const i of n){const r=this.getGemDefinition(i);if(!r)continue;let o=!1,d=0;for(;!o&&d<200;){d++;let h=r.gridPattern;const c=Math.floor(Math.random()*4);for(let E=0;E<c;E++)h=Y(h);const m=h.length,u=h[0].length;if(T<u||I<m)continue;const f=Math.floor(Math.random()*(T-u+1)),S=Math.floor(Math.random()*(I-m+1)),L={id:`secret_${i}_${e.length}`,name:i,x:f,y:S,rotation:c*90,gridPattern:h};this._isPlacementValid(L,e)&&(e.push(L),o=!0)}if(!o)break}}return e.length!==n.length?(console.error("Failed to place all secret gems!"),alert("Fehler bei der Level-Erstellung. Bitte versuchen Sie es erneut."),[]):(e.forEach(i=>this._paintGemOnGrid(i,this.secretGrid,this.secretGemMap)),console.log("Secret gems placed:",e),e)}}class N{constructor(e,t){this.state="normal",this.isUsed=!1,this.usedColor=null,this.cornerRadius=4,this.id=e,this.label=t,this.rect={x:0,y:0,width:0,height:0}}isInside(e,t){return e>=this.rect.x&&e<=this.rect.x+this.rect.width&&t>=this.rect.y&&t<=this.rect.y+this.rect.height}draw(e,t=!1){e.save();const n=this.isUsed&&this.usedColor?this.usedColor:"#4a627a";e.beginPath();const s=new Path2D;s.roundRect(this.rect.x,this.rect.y,this.rect.width,this.rect.height,this.cornerRadius),e.fillStyle=n,e.fill(s),t?(e.strokeStyle="#f1c40f",e.lineWidth=3,e.shadowColor="#f1c40f",e.shadowBlur=8,e.stroke(s),e.shadowColor="transparent",e.shadowBlur=0):this.state==="focused"&&(e.strokeStyle="#3498db",e.lineWidth=2,e.stroke(s));const r=(o=>{if(!o)return"#ecf0f1";let d=0,h=0,c=0;try{if(o.startsWith("#")){let u=o.substring(1);if(u.length===3&&(u=u.split("").map(f=>f+f).join("")),u.length!==6)return"#ecf0f1";d=parseInt(u.substring(0,2),16),h=parseInt(u.substring(2,4),16),c=parseInt(u.substring(4,6),16)}else if(o.startsWith("rgb")){const u=o.substring(o.indexOf("(")+1,o.lastIndexOf(")")).split(/,\s*/);d=parseInt(u[0]),h=parseInt(u[1]),c=parseInt(u[2])}else return"#ecf0f1"}catch{return"#ecf0f1"}return isNaN(d)||isNaN(h)||isNaN(c)?"#ecf0f1":(d*299+h*587+c*114)/1e3>=149?"#2c3e50":"#ecf0f1"})(n);e.fillStyle=r,e.font=`bold ${this.rect.height*.45}px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif`,e.textAlign="center",e.textBaseline="middle",e.fillText(this.label,this.rect.x+this.rect.width/2,this.rect.y+this.rect.height/2),e.restore()}}class se{constructor(){this.screens={},this.emitters=[],this.focusedEmitterId=null,this.dragStartInfo=null,this.isDragging=!1,this.draggedItemInfo=null,this.dragPos={x:0,y:0},this.lastValidDropTarget={x:-1,y:-1,isValid:!1},this.customCreatorState={selectedColorKey:null,selectedShapeKey:null,gems:[]},this.cellWidth=0,this.cellHeight=0,this.gap=1,this.cacheDOMElements(),this.bindGlobalEvents(),this._populateIntroRules()}bindGame(e){this.game=e}cacheDOMElements(){this.screens.main=document.getElementById("screen-main"),this.screens.difficulty=document.getElementById("screen-difficulty"),this.screens["custom-creator"]=document.getElementById("screen-custom-creator"),this.screens.game=document.getElementById("screen-game"),this.screens.end=document.getElementById("screen-end"),this.btnStartGame=document.getElementById("btn-start-game"),this.introRulesEl=document.getElementById("intro-rules"),this.difficultyOptions=document.getElementById("difficulty-options"),this.btnBackToMain1=document.getElementById("btn-back-to-main-1"),this.customColorSelector=document.getElementById("custom-color-selector"),this.customShapeSelector=document.getElementById("custom-shape-selector"),this.btnAddCustomGem=document.getElementById("btn-add-custom-gem"),this.customGemList=document.getElementById("custom-gem-list"),this.customValidationFeedback=document.getElementById("custom-validation-feedback"),this.btnStartCustomLevel=document.getElementById("btn-start-custom-level"),this.btnBackToDifficulty=document.getElementById("btn-back-to-difficulty"),this.boardWrapper=document.getElementById("game-board-wrapper"),this.gemCanvas=document.getElementById("gem-canvas"),this.gemCtx=this.gemCanvas.getContext("2d"),this.pathOverlay=document.getElementById("path-overlay"),this.pathCtx=this.pathOverlay.getContext("2d"),this.gemToolbar=document.getElementById("gem-toolbar"),this.logList=document.getElementById("log-list"),this.actionsTabBtn=document.getElementById("actions-tab-btn"),this.logTabBtn=document.getElementById("log-tab-btn"),this.rulesTabBtn=document.getElementById("rules-tab-btn"),this.rulesPanel=document.getElementById("rules-panel"),this.checkSolutionBtn=document.getElementById("check-solution-btn"),this.giveUpBtn=document.getElementById("give-up-btn"),this.previewToggle=document.getElementById("preview-toggle"),this.endTitle=document.getElementById("end-title"),this.endRating=document.getElementById("end-rating"),this.endStats=document.getElementById("end-stats"),this.endRetryMessage=document.getElementById("end-retry-message"),this.endSolutionCanvas=document.getElementById("end-solution-canvas"),this.endSolutionCtx=this.endSolutionCanvas.getContext("2d"),this.endSolutionLabel=document.getElementById("end-solution-label"),this.endRatingLegend=document.getElementById("end-rating-legend"),this.btnNewLevel=document.getElementById("btn-new-level"),this.btnMenu=document.getElementById("btn-menu")}bindGlobalEvents(){this.btnStartGame.addEventListener("click",()=>this.game.showDifficultySelect()),this.btnNewLevel.addEventListener("click",()=>{a.difficulty&&this.game.start(a.difficulty)}),this.btnMenu.addEventListener("click",()=>this.game.showMainMenu()),this.btnBackToMain1.addEventListener("click",()=>this.game.showMainMenu()),this.btnBackToDifficulty.addEventListener("click",()=>this.game.showDifficultySelect()),this.actionsTabBtn.addEventListener("click",()=>this.switchTab("actions")),this.logTabBtn.addEventListener("click",()=>this.switchTab("log")),this.rulesTabBtn.addEventListener("click",()=>this.switchTab("rules")),this.checkSolutionBtn.addEventListener("click",()=>this.game.checkSolution()),this.giveUpBtn.addEventListener("click",()=>this.game.giveUp()),this.previewToggle.addEventListener("change",()=>this.game.togglePlayerPathPreview()),this.btnAddCustomGem.addEventListener("click",()=>this._handleAddCustomGem()),this.btnStartCustomLevel.addEventListener("click",()=>this._handleStartCustomLevel()),this.gemCanvas.addEventListener("keydown",e=>this.handleCanvasKeyDown(e)),document.addEventListener("keydown",e=>{if(e.key==="n"&&(a.status===C.PLAYING||a.status===C.GAME_OVER)){a.difficulty&&this.game.start(a.difficulty);return}if(e.key==="Escape"&&(a.status===C.PLAYING||a.status===C.GAME_OVER||a.status===C.CUSTOM_CREATOR)){this.game.showMainMenu();return}a.status===C.PLAYING&&(e.key==="d"&&this.game.toggleDebugMode(),e.key==="f"&&this.game.togglePlayerPathPreview())}),document.addEventListener("click",e=>this.handleGlobalClick(e)),this.logList.addEventListener("click",e=>this.handleLogClick(e)),document.addEventListener("mousedown",e=>this.handlePointerDown(e)),document.addEventListener("touchstart",e=>this.handlePointerDown(e),{passive:!1}),document.addEventListener("mousemove",e=>this.handlePointerMove(e)),document.addEventListener("touchmove",e=>this.handlePointerMove(e),{passive:!1}),document.addEventListener("mouseup",e=>this.handlePointerUp(e)),document.addEventListener("touchend",e=>this.handlePointerUp(e)),this.logList.addEventListener("animationend",()=>{this.logList.classList.remove("flash")})}handleGlobalClick(e){if(!a.selectedLogEntryWaveId)return;const t=e.target;t.closest("#gem-canvas")||t.closest("#log-list li")||t.closest(".preview-toggle-wrapper")||this.game.setSelectedWave(null,null)}setupGameUI(){this._populateRulesPanel(),this.switchTab("actions"),this._createEmitterObjects(),this.updateToolbar(),this.logList.innerHTML="",this.updateLogTabCounter(),this.clearPath(),this.game.updateSolutionButtonState(),this.updatePreviewToggleState(a.showPlayerPathPreview),new ResizeObserver(()=>this.onBoardResize()).observe(this.boardWrapper),this.onBoardResize()}showScreen(e){e==="difficulty"&&this.populateDifficultyOptions(),e==="custom-creator"&&this._setupCustomCreator(),Object.values(this.screens).forEach(t=>t.classList.add("hidden")),this.screens[e].classList.remove("hidden"),e==="game"&&this.gemCanvas.focus()}populateDifficultyOptions(){this.difficultyOptions.innerHTML="";const e={[v.TRAINING]:"Ideal zum Lernen des Spiels, mit dem Verlauf der Lichtstrahlen.",[v.NORMAL]:"Die Grundlagen. Lerne die farbigen und weissen Steine kennen.",[v.MITTEL]:"Eine neue Herausforderung. Ein transparenter Prisma-Stein lenkt das Licht ab, ohne es zu färben.",[v.SCHWER]:"Expertenmodus. Neben dem transparenten kommt ein schwarzer, Licht absorbierender Stein in Spiel."};[v.TRAINING,v.NORMAL,v.MITTEL,v.SCHWER].forEach(n=>{const s=document.createElement("button");s.innerHTML=`${n}<div class="difficulty-desc">${e[n]}</div>`,s.onclick=()=>this.game.start(n),this.difficultyOptions.appendChild(s)});const t=document.createElement("button");t.innerHTML='Eigenes Level<div class="difficulty-desc">Wähle deine eigenen Steine und erstelle eine neue Herausforderung.</div>',t.onclick=()=>this.game.showCustomCreator(),this.difficultyOptions.appendChild(t)}_setupCustomCreator(){this.customCreatorState={selectedColorKey:null,selectedShapeKey:null,gems:[]},this._populateCreatorSelectors(),this._updateCustomGemList(),this._validateCustomSet()}_populateCreatorSelectors(){this.customColorSelector.innerHTML="",Object.entries(H).forEach(([e,t])=>{const n=document.createElement("div");n.className="color-choice",n.dataset.colorKey=e,n.style.backgroundColor=t.color,e==="TRANSPARENT"&&(n.style.border=`2px solid ${p.TRANSPARENT}`,n.style.backgroundColor="rgba(164, 212, 228, 0.3)"),n.title=t.name,n.onclick=()=>{this.customCreatorState.selectedColorKey=e,this.customColorSelector.querySelectorAll(".color-choice").forEach(s=>s.classList.remove("selected")),n.classList.add("selected")},this.customColorSelector.appendChild(n)}),this.customShapeSelector.innerHTML="",Object.entries(U).forEach(([e,t])=>{const n=document.createElement("div");n.className="shape-choice",n.dataset.shapeKey=e,n.title=t.name;const s=document.createElement("canvas");n.appendChild(s),n.onclick=()=>{this.customCreatorState.selectedShapeKey=e,this.customShapeSelector.querySelectorAll(".shape-choice").forEach(i=>i.classList.remove("selected")),n.classList.add("selected")},this.customShapeSelector.appendChild(n),setTimeout(()=>this.drawToolbarGem(s,t),0)})}_handleAddCustomGem(){const{selectedColorKey:e,selectedShapeKey:t}=this.customCreatorState;if(!e||!t){alert("Bitte wähle zuerst eine Farbe und eine Form aus.");return}const n=H[e],s=U[t];let i=s.gridPattern;e==="SCHWARZ"&&(i=s.gridPattern.map(d=>d.map(h=>h!==l.EMPTY?l.ABSORB:l.EMPTY)));const r=`CUSTOM_${e}_${t}_${Date.now()}`,o={...n,...s,gridPattern:i,name:r,originalColorKey:e};this.customCreatorState.gems.push(o),this._updateCustomGemList(),this._validateCustomSet()}_updateCustomGemList(){this.customGemList.innerHTML="",this.customCreatorState.gems.forEach((e,t)=>{const n=document.createElement("div");n.className="custom-gem-item";const s=document.createElement("canvas");n.appendChild(s);const i=document.createElement("button");i.className="delete-gem-btn",i.innerHTML="&times;",i.title="Entfernen",i.onclick=()=>{this.customCreatorState.gems.splice(t,1),this._updateCustomGemList(),this._validateCustomSet()},n.appendChild(i),this.customGemList.appendChild(n),setTimeout(()=>this.drawToolbarGem(s,e),0)})}_validateCustomSet(){const e=this.customCreatorState.gems,t={ROT:0,GELB:0,BLAU:0,WEISS:0,TRANSPARENT:0,SCHWARZ:0};e.forEach(i=>{t.hasOwnProperty(i.originalColorKey)&&t[i.originalColorKey]++});const n=[{condition:t.ROT===1,error:"Benötigt: <strong>genau 1 roten</strong> Stein"},{condition:t.GELB===1,error:"Benötigt: <strong>genau 1 gelben</strong> Stein"},{condition:t.BLAU===1,error:"Benötigt: <strong>genau 1 blauen</strong> Stein"},{condition:t.WEISS>=1,error:"Benötigt: <strong>mindestens 1 weissen</strong> Stein"},{condition:t.WEISS<=2,error:"Erlaubt: <strong>maximal 2 weisse</strong> Steine"},{condition:t.TRANSPARENT<=2,error:"Erlaubt: <strong>maximal 2 transparente</strong> Steine"},{condition:t.SCHWARZ<=1,error:"Erlaubt: <strong>maximal 1 schwarzen</strong> Stein"}];let s=null;for(const i of n)if(!i.condition){s=i.error;break}s?(this.customValidationFeedback.innerHTML=`<div class="invalid">❌ ${s}</div>`,this.btnStartCustomLevel.disabled=!0):(this.customValidationFeedback.innerHTML='<div class="valid">✅ Level ist valide</div>',this.btnStartCustomLevel.disabled=!1)}_handleStartCustomLevel(){if(this.btnStartCustomLevel.disabled)return;const e=this.customCreatorState.gems;a.customGemSet=e.map(t=>t.name),a.customGemDefinitions=Object.fromEntries(e.map(t=>[t.name,t])),this.game.start(v.CUSTOM)}_createEmitterObjects(){this.emitters=[];for(let e=0;e<T;e++)this.emitters.push(new N(`T${e+1}`,`T${e+1}`));for(let e=0;e<T;e++)this.emitters.push(new N(`B${e+1}`,`B${e+1}`));for(let e=0;e<I;e++)this.emitters.push(new N(`L${e+1}`,`L${e+1}`));for(let e=0;e<I;e++)this.emitters.push(new N(`R${e+1}`,`R${e+1}`));this.emitters.length>0&&(this.focusedEmitterId=this.emitters[0].id)}onBoardResize(){const e=this.boardWrapper.getBoundingClientRect();if(e.width===0||e.height===0)return;const t=T+2,n=I+2;this.cellWidth=(e.width-(t-1)*this.gap)/t,this.cellHeight=(e.height-(n-1)*this.gap)/n;const s=window.devicePixelRatio||1;[this.pathOverlay,this.gemCanvas].forEach(i=>{i.width=e.width*s,i.height=e.height*s,i.style.width=`${e.width}px`,i.style.height=`${e.height}px`,i.getContext("2d").scale(s,s)}),this.emitters.forEach(i=>{const r=i.id,o=parseInt(r.substring(1))-1;let d=0,h=0;switch(r[0]){case"T":d=o+1,h=0;break;case"B":d=o+1,h=n-1;break;case"L":d=0,h=o+1;break;case"R":d=t-1,h=o+1;break}i.rect.x=d*(this.cellWidth+this.gap),i.rect.y=h*(this.cellHeight+this.gap),i.rect.width=this.cellWidth,i.rect.height=this.cellHeight}),this.redrawAll()}getGemDefinition(e){return a.difficulty===v.CUSTOM?a.customGemDefinitions[e]:_[e]}_getGemTooltip(e){var i;const t=this.getGemDefinition(e);if(!t)return"";if(t.special==="absorbs")return"Absorbiert Licht.";if(t.baseGems.length===0)return"Reflektiert nur, färbt nicht.";const n=t.baseGems[0];return`Fügt Farbe '${((i=W[n])==null?void 0:i.toLowerCase())||"unbekannt"}' hinzu.`}updateToolbar(){if(this.gemToolbar.innerHTML="",!a.difficulty)return;const t=a.difficulty===v.CUSTOM?a.customGemSet:k[a.difficulty];if(!t)return;const n=new Set(a.playerGems.map(s=>s.name));t.forEach(s=>{const i=this.getGemDefinition(s);if(!i)return;const r=document.createElement("div");r.className="toolbar-gem",n.has(s)&&r.classList.add("placed"),r.dataset.gemName=s,r.title=this._getGemTooltip(s);const o=document.createElement("canvas");o.className="toolbar-gem-canvas",r.appendChild(o),this.gemToolbar.appendChild(r),setTimeout(()=>this.drawToolbarGem(o,i),0)})}drawToolbarGem(e,t){const n=e.getContext("2d");if(!n)return;const s=window.devicePixelRatio||1,i=e.getBoundingClientRect();if(i.width===0||i.height===0)return;e.width=i.width*s,e.height=i.height*s,n.scale(s,s),n.clearRect(0,0,i.width,i.height);const r=t.gridPattern,o=r.length,d=r[0].length,c=Math.min(i.width/d,i.height/o),m=d*c,u=o*c,f=(i.width-m)/2,S=(i.height-u)/2,L=t.color||"#bdc3c7";for(let E=0;E<o;E++)for(let G=0;G<d;G++){const A=r[E][G];A!==l.EMPTY&&this.drawCellShape(n,G*c+f,E*c+S,c,c,A,L)}}handleSelectionChange(){this.redrawAll(),this.updateLogHighlight()}redrawAll(){if(this.gemCanvas.width===0)return;const e=this.gemCtx;this._clearCanvas(e),this._drawBoardBackgroundAndGrid(e);const t=a.selectedLogEntryWaveId?a.log.find(n=>n.waveId===a.selectedLogEntryWaveId):null;if(this.emitters.forEach(n=>{let s=!1;t&&(s=n.id===t.waveId||n.id===t.result.exitId),n.draw(e,s)}),this.clearPath(),t&&(a.difficulty===v.TRAINING||a.debugMode)&&t.path){const s=this.getPathColor(t.result);this.drawPath(t.path,s,!1)}if(a.showPlayerPathPreview&&a.activePlayerPath&&a.activePlayerResult){const n=this.getPathColor(a.activePlayerResult);this.drawPath(a.activePlayerPath,n,!0)}a.status===C.PLAYING&&(a.debugMode&&this.drawDebugSolution(e),this.drawPlayerGems(e),this._drawSelectedWaveTooltip(e),this.isDragging&&this.draggedItemInfo&&this.drawDragPreview(e))}drawDragPreview(e){if(!this.draggedItemInfo)return;const{gridPattern:t,name:n,id:s}=this.draggedItemInfo,i=this.getGemDefinition(n);if(!i)return;const r=t[0].length,o=t.length,d=this.dragPos.x/(this.cellWidth+this.gap)-1-r/2+.5,h=this.dragPos.y/(this.cellHeight+this.gap)-1-o/2+.5,c=Math.round(d),m=Math.round(h),u={id:s,name:n,x:c,y:m,gridPattern:t};this.lastValidDropTarget.isValid=this.game.canPlaceGem(u),this.lastValidDropTarget.x=c,this.lastValidDropTarget.y=m,e.save(),e.globalAlpha=.7;for(let f=0;f<o;f++)for(let S=0;S<r;S++)if(t[f][S]!==l.EMPTY){const L=this._gridToCanvasCoords(c+S,m+f);this.drawCellShape(e,L.x,L.y,this.cellWidth,this.cellHeight,t[f][S],i.color,!this.lastValidDropTarget.isValid)}e.restore()}drawPlayerGems(e){var t,n;for(const s of a.playerGems){if(this.isDragging&&((t=this.draggedItemInfo)==null?void 0:t.from)==="board"&&this.draggedItemInfo.id===s.id)continue;const{gridPattern:i,x:r,y:o,name:d}=s,h=this.getGemDefinition(d);if(!h)continue;const c=h.color,m=!s.isValid;let u=!1;this.isDragging||(u=((n=this.getGemAtCanvasPos(this.dragPos.x,this.dragPos.y))==null?void 0:n.id)===s.id);for(let f=0;f<i.length;f++)for(let S=0;S<i[f].length;S++){const L=i[f][S];if(L!==l.EMPTY){const E=this._gridToCanvasCoords(r+S,o+f);this.drawCellShape(e,E.x,E.y,this.cellWidth,this.cellHeight,L,c,m,u)}}}}_drawBoardBackgroundAndGrid(e){e.save();const t=getComputedStyle(document.documentElement).getPropertyValue("--surface-color"),n=getComputedStyle(document.documentElement).getPropertyValue("--border-color");e.fillStyle=t,e.fillRect(0,0,e.canvas.width,e.canvas.height),e.fillStyle=n,e.fillRect(this.cellWidth+this.gap/2,this.cellHeight+this.gap/2,T*this.cellWidth+(T+1)*this.gap,I*this.cellHeight+(I+1)*this.gap),e.fillStyle=t,e.fillRect(this.cellWidth+this.gap,this.cellHeight+this.gap,T*this.cellWidth+(T-1)*this.gap,I*this.cellHeight+(I-1)*this.gap),e.strokeStyle=n,e.lineWidth=this.gap,e.beginPath();for(let s=1;s<T;s++){const i=(s+1)*(this.cellWidth+this.gap)-this.gap/2;e.moveTo(i,this.cellHeight+this.gap),e.lineTo(i,(I+1)*(this.cellHeight+this.gap))}for(let s=1;s<I;s++){const i=(s+1)*(this.cellHeight+this.gap)-this.gap/2;e.moveTo(this.cellWidth+this.gap,i),e.lineTo((T+1)*(this.cellWidth+this.gap),i)}e.stroke(),e.restore()}drawDebugSolution(e){if(!(!this.game.secretGrid||a.secretGems.length===0)){e.save();for(const t of a.secretGems){const{gridPattern:n,x:s,y:i,name:r}=t,o=this.getGemDefinition(r);if(!o)continue;const d=o.color;e.globalAlpha=.2;for(let h=0;h<n.length;h++)for(let c=0;c<n[h].length;c++){const m=n[h][c];if(m!==l.EMPTY){const u=this._gridToCanvasCoords(s+c,i+h);this.drawCellShape(e,u.x,u.y,this.cellWidth,this.cellHeight,m,d)}}}e.restore()}}drawCellShape(e,t,n,s,i,r,o,d=!1,h=!1){e.save(),o===p.TRANSPARENT?(e.fillStyle="rgba(164, 212, 228, 0.3)",e.strokeStyle="#a4d4e4",e.lineWidth=2):o===p.SCHWARZ_GEM?(e.fillStyle=o,e.strokeStyle="#555",e.lineWidth=1):(e.fillStyle=o,e.strokeStyle="rgba(0,0,0,0.4)",e.lineWidth=1),d&&(e.fillStyle="rgba(231, 76, 60, 0.5)",e.strokeStyle=p.INVALID_GEM,e.lineWidth=2),h&&!d&&(e.shadowColor="white",e.shadowBlur=10),e.beginPath();const c=new Path2D;switch(r){case l.BLOCK:case l.ABSORB:c.rect(t,n,s,i);break;case l.TRIANGLE_TL:c.moveTo(t,n),c.lineTo(t+s,n),c.lineTo(t,n+i),c.closePath();break;case l.TRIANGLE_TR:c.moveTo(t,n),c.lineTo(t+s,n),c.lineTo(t+s,n+i),c.closePath();break;case l.TRIANGLE_BR:c.moveTo(t+s,n),c.lineTo(t+s,n+i),c.lineTo(t,n+i),c.closePath();break;case l.TRIANGLE_BL:c.moveTo(t,n),c.lineTo(t,n+i),c.lineTo(t+s,n+i),c.closePath();break}e.fill(c),e.stroke(c),e.restore()}_gridToCanvasCoords(e,t){return{x:(e+1)*(this.cellWidth+this.gap),y:(t+1)*(this.cellHeight+this.gap)}}_canvasToGridCoords(e,t){return{x:Math.floor(e/(this.cellWidth+this.gap))-1,y:Math.floor(t/(this.cellHeight+this.gap))-1}}getPathColor(e){if(e.absorbed)return p.ABSORBIERT;if(e.colors.length===0)return"rgba(236, 240, 241, 0.7)";const t=[...e.colors].sort().join(",");return x[t]||"#ccc"}drawPath(e,t,n=!1){if(e.length<2)return;const s=this.pathCtx;s.save(),s.strokeStyle=t,s.lineWidth=3,s.lineCap="round",s.lineJoin="round",s.shadowColor="rgba(0,0,0,0.5)",s.shadowBlur=5,n&&(s.globalAlpha=.6,s.setLineDash([8,6])),s.beginPath();const i=this.cellWidth+this.gap,r=this.cellHeight+this.gap,o=this.cellWidth+this.gap,d=this.cellHeight+this.gap,h=m=>{const u=i+m.x*o,f=r+m.y*d;return{x:u,y:f}},c=h(e[0]);s.moveTo(c.x,c.y);for(let m=1;m<e.length;m++)s.lineTo(h(e[m]).x,h(e[m]).y);s.stroke(),s.restore()}_clearCanvas(e){e.save(),e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,e.canvas.width,e.canvas.height),e.restore()}clearPath(){this._clearCanvas(this.pathCtx)}switchTab(e){document.querySelectorAll(".tab-btn, .tab-panel").forEach(t=>t.classList.remove("active")),document.getElementById(`${e}-tab-btn`).classList.add("active"),document.getElementById(`${e}-panel`).classList.add("active")}addLogEntry(e,t){const n=document.createElement("li");n.dataset.waveId=t;const{result:s}=e,i=`${t} ➔ ${s.exitId}`,r=this.getPathColor(s),o=this._getPathColorName(s);n.innerHTML=`<span>${i}</span><div class="log-entry-result"><span class="log-color-name">${o}</span><div class="log-color-box" style="background-color: ${r};"></div></div>`,this.logList.prepend(n),this.updateLogTabCounter();const d=this.emitters.find(h=>h.id===t);if(d&&(d.isUsed=!0,d.usedColor=r),s.exitId&&s.exitId!=="Loop?"){const h=this.emitters.find(c=>c.id===s.exitId);h&&(h.isUsed=!0,h.usedColor=r)}}updateLogTabCounter(){const e=a.log.length;e>0?this.logTabBtn.textContent=`Logbuch (${e})`:this.logTabBtn.textContent="Logbuch"}_areGemSetsIdentical(e,t){if(e.length!==t.length)return!1;const n=r=>`${r.name},${r.x},${r.y},${JSON.stringify(r.gridPattern)}`,s=new Set(e.map(n)),i=new Set(t.map(n));if(s.size!==i.size)return!1;for(const r of s)if(!i.has(r))return!1;return!0}showEndScreen(e,t,n,s){this.endTitle.classList.remove("win","loss"),this.endRetryMessage.textContent="",this.endRating.textContent="",this.endRatingLegend.innerHTML="",this.endRating.style.display="none",this.endRatingLegend.style.display="none";let i=[];if(e){this.endTitle.textContent="Gewonnen!",this.endTitle.classList.add("win"),this.endStats.textContent=`Du hast die Mine in ${t} Abfragen gelöst.`,this._areGemSetsIdentical(n,s)?(this.endSolutionLabel.textContent="Korrekte Lösung:",i=[]):(this.endSolutionLabel.textContent="Alternative Lösung gefunden! Deine Lösung (transparent):",i=s);const o=a.difficulty;if(o&&$[o]){const d=$[o];let h="";for(const c of d)if(t<=c.limit){h=c.text;break}if(h){this.endRating.textContent=h,this.endRating.style.display="block",this.endRatingLegend.style.display="block";let c=`<h5>Bewertung für ${o}</h5><ul>`,m=0;d.forEach(u=>{const f=m===0?`bis ${u.limit} Abfragen`:u.limit===1/0?`mehr als ${m} Abfragen`:`${m+1} - ${u.limit} Abfragen`;c+=`<li><strong>${u.text}:</strong> ${f}</li>`,m=u.limit}),c+="</ul>",this.endRatingLegend.innerHTML=c}}}else this.endTitle.textContent="Verloren!",this.endTitle.classList.add("loss"),this.endStats.textContent=`Du hast ${t} Abfragen gebraucht.`,this.endRetryMessage.textContent="Bitte versuche es erneut.",this.endSolutionLabel.textContent="Deine Eingabe (über der korrekten Lösung):",i=s;this.showScreen("end"),requestAnimationFrame(()=>{this.drawEndScreenSolution(this.endSolutionCtx,n,i,this.emitters)})}drawEndScreenSolution(e,t,n,s){const i=e.canvas,r=window.devicePixelRatio||1,o=i.getBoundingClientRect();if(o.width===0||o.height===0)return;i.width=o.width*r,i.height=o.height*r,e.scale(r,r),e.clearRect(0,0,o.width,o.height);const d=1,h=T+2,c=I+2,m=(o.width-(h-1)*d)/h,u=(o.height-(c-1)*d)/c,f=(E,G,A)=>{e.save(),e.globalAlpha=G;for(const y of E){const R=this.getGemDefinition(y.name);if(!R)continue;const w=R.color,B=A?!y.isValid:!1;for(let P=0;P<y.gridPattern.length;P++)for(let O=0;O<y.gridPattern[P].length;O++){const D=y.gridPattern[P][O];if(D!==l.EMPTY){const F=y.x+O,V=y.y+P,z=(F+1)*(m+d),X=(V+1)*(u+d);this.drawCellShape(e,z,X,m,u,D,w,B)}}}e.restore()};e.save();const S=getComputedStyle(document.documentElement).getPropertyValue("--surface-color"),L=getComputedStyle(document.documentElement).getPropertyValue("--border-color");e.fillStyle=S,e.fillRect(0,0,o.width,o.height),e.fillStyle=L,e.fillRect(m+d/2,u+d/2,T*m+(T+1)*d,I*u+(I+1)*d),e.fillStyle=S,e.fillRect(m+d,u+d,T*(m+d)-d,I*(u+d)-d),e.strokeStyle=L,e.lineWidth=d,e.beginPath();for(let E=1;E<T;E++){const G=(E+1)*(m+d)-d/2;e.moveTo(G,u+d),e.lineTo(G,(I+1)*(u+d))}for(let E=1;E<I;E++){const G=(E+1)*(u+d)-d/2;e.moveTo(m+d,G),e.lineTo((T+1)*(m+d),G)}e.stroke(),e.restore(),s.forEach(E=>{const G=E.id,A=parseInt(G.substring(1))-1;let y=0,R=0;switch(G[0]){case"T":y=A+1,R=0;break;case"B":y=A+1,R=c-1;break;case"L":y=0,R=A+1;break;case"R":y=h-1,R=A+1;break}const w=Object.assign(new N(E.id,E.label),E);w.rect={x:y*(m+d),y:R*(u+d),width:m,height:u},w.state="normal",w.draw(e,!1)}),f(t,1,!1),n.length>0&&f(n,.55,!0)}handleLogClick(e){const t=e.target.closest("li");if(t&&t.dataset.waveId){const n=t.dataset.waveId;a.selectedLogEntryWaveId===n?this.game.setSelectedWave(null,null):this.game.setSelectedWave(n,n)}}handleCanvasHover(e,t){if(this.isDragging)return;const n=this.gemCanvas.getBoundingClientRect(),s=e-n.left,i=t-n.top;this.dragPos={x:s,y:i},this.redrawAll()}handleCanvasMouseLeave(){this.dragPos={x:-1,y:-1},this.redrawAll()}updatePreviewToggleState(e){this.previewToggle.checked=e}updateLogHighlight(){this.logList.querySelectorAll("li").forEach(e=>{const t=e;t.dataset.waveId===a.selectedLogEntryWaveId?(t.classList.add("selected"),t.scrollIntoView({behavior:"smooth",block:"nearest"})):t.classList.remove("selected")})}handleCanvasKeyDown(e){if(!["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Enter"," "].includes(e.key))return;e.preventDefault();const t=this.emitters.find(i=>i.id===this.focusedEmitterId);if(t&&(t.state="normal"),e.key==="Enter"||e.key===" "){if(this.focusedEmitterId){const i=this.emitters.find(r=>r.id===this.focusedEmitterId);if(i&&!i.isUsed)this.game.sendWave(this.focusedEmitterId);else if(i!=null&&i.isUsed){const r=a.log.find(o=>o.waveId===i.id||o.result.exitId===i.id);r&&(a.selectedLogEntryWaveId===r.waveId&&a.previewSourceEmitterId===i.id?this.game.setSelectedWave(null,null):this.game.setSelectedWave(r.waveId,i.id))}}t&&(t.state="focused"),this.redrawAll(),this.updateLogHighlight();return}const n=this.emitters.findIndex(i=>i.id===this.focusedEmitterId);if(n===-1)return;let s=-1;switch(e.key){case"ArrowRight":s=(n+1)%this.emitters.length;break;case"ArrowLeft":s=(n-1+this.emitters.length)%this.emitters.length;break;case"ArrowUp":s=(n-1+this.emitters.length)%this.emitters.length;break;case"ArrowDown":s=(n+1)%this.emitters.length;break}if(s!==-1){this.focusedEmitterId=this.emitters[s].id;const i=this.emitters[s];i&&(i.state="focused"),this.redrawAll()}}getPointerCoordinates(e){return e instanceof MouseEvent?{clientX:e.clientX,clientY:e.clientY}:e.changedTouches&&e.changedTouches.length>0?{clientX:e.changedTouches[0].clientX,clientY:e.changedTouches[0].clientY}:null}handlePointerDown(e){if(e instanceof MouseEvent&&e.button!==0)return;const t=this.getPointerCoordinates(e);if(!t)return;const{clientX:n,clientY:s}=t,i=e.target,r=i.closest(".toolbar-gem:not(.placed)"),o=i.closest("#gem-canvas");e instanceof TouchEvent&&(o||r)&&e.preventDefault();let d=null,h=0,c=0;if(r){const m=r.getBoundingClientRect();h=n-m.left,c=s-m.top;const u=r.dataset.gemName,f=this.getGemDefinition(u);f&&(d={name:u,from:"toolbar",gridPattern:f.gridPattern,element:r,offsetX:h,offsetY:c})}else if(o){const m=this.gemCanvas.getBoundingClientRect(),u=n-m.left,f=s-m.top,S=this.getGemAtCanvasPos(u,f);if(S){const L=this._canvasToGridCoords(u,f);d={id:S.id,name:S.name,from:"board",gridPattern:S.gridPattern,offsetX:(L.x-S.x)*this.cellWidth,offsetY:(L.y-S.y)*this.cellHeight}}}d&&(this.dragStartInfo={item:d,startX:n,startY:s})}handlePointerMove(e){const t=this.getPointerCoordinates(e);if(!t)return;const{clientX:n,clientY:s}=t;if(this.dragStartInfo){if(e instanceof TouchEvent&&e.preventDefault(),!this.isDragging){const i=n-this.dragStartInfo.startX,r=s-this.dragStartInfo.startY;Math.sqrt(i*i+r*r)>5&&(this.isDragging=!0,this.draggedItemInfo=this.dragStartInfo.item,this.draggedItemInfo.element&&this.draggedItemInfo.element.classList.add("dragging"))}if(this.isDragging){const i=this.gemCanvas.getBoundingClientRect();this.dragPos={x:n-i.left,y:s-i.top},this.redrawAll()}}else e.target===this.gemCanvas?this.handleCanvasHover(n,s):this.handleCanvasMouseLeave()}handlePointerUp(e){var r;const t=this.getPointerCoordinates(e);if(!t)return;const{clientX:n,clientY:s}=t;if(this.isDragging&&this.draggedItemInfo){const o=this.gemCanvas.getBoundingClientRect();if(n>=o.left&&n<=o.right&&s>=o.top&&s<=o.bottom){const{x:h,y:c}=this.lastValidDropTarget,{gridPattern:m}=this.draggedItemInfo,u=m[0].length,f=m.length;h>=0&&c>=0&&h+u<=T&&c+f<=I&&(this.draggedItemInfo.from==="toolbar"?this.game.addPlayerGem(this.draggedItemInfo.name,h,c):this.draggedItemInfo.id&&this.game.movePlayerGem(this.draggedItemInfo.id,h,c))}else this.draggedItemInfo.from==="board"&&this.draggedItemInfo.id&&this.game.removePlayerGem(this.draggedItemInfo.id)}else if(e.target.closest("#gem-canvas")){const d=this.gemCanvas.getBoundingClientRect(),h=n-d.left,c=s-d.top,m=this.emitters.find(u=>u.isInside(h,c));if(m)if(!m.isUsed)this.game.sendWave(m.id);else{const u=a.log.find(f=>f.waveId===m.id||f.result.exitId===m.id);u?a.selectedLogEntryWaveId===u.waveId&&a.previewSourceEmitterId===m.id?this.game.setSelectedWave(null,null):this.game.setSelectedWave(u.waveId,m.id):this.game.setSelectedWave(null,null)}else{const u=this.getGemAtCanvasPos(h,c);u?(this.game.setSelectedWave(null,null),this.game.rotatePlayerGem(u.id)):this.game.setSelectedWave(null,null)}}(r=this.dragStartInfo)!=null&&r.item.element&&this.dragStartInfo.item.element.classList.remove("dragging"),this.dragStartInfo=null,this.isDragging=!1,this.draggedItemInfo=null,this.redrawAll(),this.updateToolbar()}getGemAtCanvasPos(e,t){if(e<0||t<0)return null;const{x:n,y:s}=this._canvasToGridCoords(e,t);for(let i=a.playerGems.length-1;i>=0;i--){const r=a.playerGems[i],o=r.gridPattern.length,d=r.gridPattern[0].length;if(n>=r.x&&n<r.x+d&&s>=r.y&&s<r.y+o&&r.gridPattern[s-r.y][n-r.x]!==l.EMPTY)return r}return null}_getPathColorName(e){if(e.absorbed)return"Absorbiert";if(e.colors.length===0)return"Keine Farbe";const t=[...e.colors].sort().join(",");return W[t]||"Unbekannte Mischung"}_createColorMixEntry(e){const t=x[e],n=e.split(","),s=document.createElement("div");s.className="color-mix-entry";let i="";n.forEach((o,d)=>{const h=p[o];i+=`<div class="color-mix-box" style="background-color: ${h}"></div>`,d<n.length-1&&(i+="<span>+</span>")});const r=W[e]||"Mischung";return i+=`<span>=</span> <div class="color-mix-box" style="background-color: ${t}"></div> <span>${r}</span>`,s.innerHTML=i,s}_populateColorMixColumns(e){if(!e)return;const t=document.createElement("div");t.className="color-mix-column";const n=document.createElement("div");n.className="color-mix-column";const s=["BLAU,ROT","BLAU,GELB","GELB,ROT","BLAU,ROT,WEISS","BLAU,GELB,WEISS","BLAU,GELB,ROT,WEISS"],i=["BLAU,WEISS","ROT,WEISS","GELB,WEISS","BLAU,GELB,ROT","GELB,ROT,WEISS"];s.forEach(r=>t.appendChild(this._createColorMixEntry(r))),i.forEach(r=>n.appendChild(this._createColorMixEntry(r))),e.appendChild(t),e.appendChild(n)}_populateIntroRules(){this.introRulesEl.innerHTML=`
            <h3>Spielanleitung</h3>
            <p><strong>Ziel:</strong> Finde die Position und Ausrichtung der versteckten Edelsteine.</p>
            <ul>
                <li>Sende Lichtwellen von den Rändern in das Spielfeld.</li>
                <li>Die austretende Farbe und Position verraten, welche Steine getroffen wurden.</li>
                <li>Ziehe Edelsteine aus der Werkzeugleiste auf das Feld. Du kannst sie verschieben und drehen.</li>
                <li>Ein Klick auf einen platzierten Stein dreht ihn um 90°.</li>
                <li>Steine dürfen sich nicht überlappen oder Kante an Kante liegen.</li>
                <li>Drücke <strong>'n'</strong> für ein neues Level oder <strong>'esc'</strong> um zum Menü zurückzukehren.</li>
            </ul>
            <h4>Farbmischung</h4>
            <p>Wenn ein Lichtstrahl mehrere farbige Steine durchquert, mischen sich ihre Farben:</p>
            <div class="color-mix-container"></div>
        `;const e=this.introRulesEl.querySelector(".color-mix-container");this._populateColorMixColumns(e)}_populateRulesPanel(){this.rulesPanel.innerHTML=`
            <h4>Grundregeln</h4>
            <ul>
                <li><strong>Ziel:</strong> Finde die Position und Ausrichtung der versteckten Edelsteine.</li>
                <li>Sende Lichtwellen, um zu sehen, wo sie austreten und welche Farbe sie haben.</li>
                <li>Ziehe die Edelsteine auf das Feld, um die Lösung nachzubauen.</li>
                <li>Klicke auf einen platzierten Stein, um ihn zu <strong>drehen</strong>.</li>
                <li>Steine dürfen sich nicht überlappen oder Kante an Kante liegen.</li>
            </ul>
            <h4>Farbmischung</h4>
            <p>Wenn ein Lichtstrahl mehrere farbige Steine durchquert, mischen sich ihre Farben:</p>
            <div class="color-mix-container"></div>
        `;const e=this.rulesPanel.querySelector(".color-mix-container");this._populateColorMixColumns(e)}_drawSelectedWaveTooltip(e){if(!a.selectedLogEntryWaveId)return;const t=a.log.find(P=>P.waveId===a.selectedLogEntryWaveId);if(!t)return;const n=a.previewSourceEmitterId||t.waveId,s=this.emitters.find(P=>P.id===n);if(!s)return;const i=t.waveId,r=t.result.exitId,o=this._getPathColorName(t.result),d=n===i?`${i} ➔ ${o} ➔ ${r}`:`${r} ➔ ${o} ➔ ${i}`;e.save();const h=this.cellHeight*.35;e.font=`bold ${h}px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif`,e.textBaseline="middle";const c=e.measureText(d),m={x:8,y:5},u=c.width+m.x*2,f=h+m.y*2,S=6,L=s.rect,E=5,G=this.gemCanvas.width/(window.devicePixelRatio||1),A=this.gemCanvas.height/(window.devicePixelRatio||1);let y=0,R=0;R=L.y+L.height+E,y=L.x+L.width/2-u/2,R+f>A&&(R=L.y-f-E,R<0&&(y=L.x+L.width+E,R=L.y+L.height/2-f/2,y+u>G&&(y=L.x-u-E))),y<0&&(y=0),y+u>G&&(y=G-u),R<0&&(R=0),R+f>A&&(R=A-f);const w=y+u/2,B=R+f/2;e.fillStyle="black",e.beginPath(),e.roundRect(y,R,u,f,S),e.fill(),e.fillStyle="white",e.textAlign="center",e.fillText(d,w,B),e.restore()}}document.addEventListener("DOMContentLoaded",()=>{const g=new se,e=new ie(g);window.game=e});
